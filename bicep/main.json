{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "1287626766300365694"
    }
  },
  "parameters": {
    "clients": {
      "type": "array",
      "metadata": {
        "description": "List of client configurations for deployment"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Location for all resources, defaults to East US"
      }
    },
    "discriminator": {
      "type": "string",
      "defaultValue": "lexsb",
      "metadata": {
        "description": "Unique qualifier for resource naming to avoid conflicts"
      }
    },
    "deployVpn": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to deploy VPN Gateway as part of the deployment"
      }
    },
    "vpnRootCertName": {
      "type": "string",
      "defaultValue": "P2SRootCert",
      "metadata": {
        "description": "VPN certificate name for P2S VPN authentication"
      }
    },
    "vpnRootCertData": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "VPN certificate data for P2S VPN authentication (base64-encoded .cer file). If not provided, a certificate will be generated automatically."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "centralResourceGroup",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "rg-central"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "15707163151755465878"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Resource Group"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location where the Resource Group will be created"
              }
            }
          },
          "resources": [
            {
              "condition": "[not(equals(subscription().id, ''))]",
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Resource Group"
              },
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            }
          }
        }
      }
    },
    {
      "copy": {
        "name": "clientResourceGroups",
        "count": "[length(parameters('clients'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rg-{0}', parameters('clients')[copyIndex()].name)]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('rg-{0}', parameters('clients')[copyIndex()].name)]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "15707163151755465878"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Resource Group"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location where the Resource Group will be created"
              }
            }
          },
          "resources": [
            {
              "condition": "[not(equals(subscription().id, ''))]",
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Resource Group"
              },
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "centralResourcesDeployment",
      "resourceGroup": "rg-central",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          },
          "clientNames": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('clients'))]",
                "input": "[parameters('clients')[copyIndex('value')].name]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "708577775013343468"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Geographic location for all central resources"
              }
            },
            "firewallName": {
              "type": "string",
              "defaultValue": "globalFirewall",
              "metadata": {
                "description": "Name of the global Azure Firewall resource"
              }
            },
            "frontDoorName": {
              "type": "string",
              "defaultValue": "globalFrontDoor",
              "metadata": {
                "description": "Name of the global Azure Front Door resource"
              }
            },
            "sentinelWorkspaceName": {
              "type": "string",
              "defaultValue": "globalSentinelWorkspace",
              "metadata": {
                "description": "Name of the global Sentinel (Log Analytics) workspace"
              }
            },
            "centralVNetCidr": {
              "type": "string",
              "defaultValue": "10.0.0.0/16",
              "metadata": {
                "description": "CIDR block for the central VNet"
              }
            },
            "discriminator": {
              "type": "string",
              "metadata": {
                "description": "Unique qualifier for resource naming to avoid conflicts"
              }
            },
            "clientNames": {
              "type": "array",
              "metadata": {
                "description": "List of client names for linking to central resources"
              }
            },
            "subnets": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "AzureFirewallSubnet",
                  "addressPrefix": "10.0.1.0/24"
                },
                {
                  "name": "OtherServices",
                  "addressPrefix": "10.0.2.0/24"
                },
                {
                  "name": "GatewaySubnet",
                  "addressPrefix": "10.0.3.0/26"
                }
              ],
              "metadata": {
                "description": "Subnet configuration for the central VNet"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "clientPrivateLinkSubnets",
                "count": "[length(parameters('clientNames'))]",
                "input": "[format('10.{0}.3.0/24', add(indexOf(parameters('clientNames'), parameters('clientNames')[copyIndex('clientPrivateLinkSubnets')]), 1))]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2023-02-01",
              "name": "RouteTable",
              "location": "[parameters('location')]",
              "properties": {
                "routes": [
                  {
                    "name": "RouteToFirewall",
                    "properties": {
                      "addressPrefix": "0.0.0.0/0",
                      "nextHopType": "VirtualAppliance",
                      "nextHopIpAddress": "[reference(resourceId('Microsoft.Resources/deployments', 'firewall'), '2022-09-01').outputs.privateIp.value]"
                    }
                  },
                  {
                    "name": "BypassVpnClient",
                    "properties": {
                      "addressPrefix": "172.16.0.0/24",
                      "nextHopType": "VirtualNetworkGateway"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'firewall')]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-02-01",
              "name": "[format('{0}/{1}', format('vnet-{0}-Central', parameters('discriminator')), 'OtherServices')]",
              "properties": {
                "addressPrefix": "10.0.2.0/24",
                "routeTable": {
                  "id": "[resourceId('Microsoft.Network/routeTables', 'RouteTable')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'centralVNet')]",
                "[resourceId('Microsoft.Network/routeTables', 'RouteTable')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "centralVNet",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "Central"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "addressPrefixes": {
                    "value": [
                      "[parameters('centralVNetCidr')]"
                    ]
                  },
                  "subnets": {
                    "value": "[parameters('subnets')]"
                  },
                  "topology": {
                    "value": "hub"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "16722299546444263991"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Creates a virtual network with the specified naming"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Geographic location for all resources"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Address prefixes for the virtual network"
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Subnet configuration for the virtual network"
                      }
                    },
                    "topology": {
                      "type": "string",
                      "allowedValues": [
                        "hub",
                        "spoke"
                      ],
                      "metadata": {
                        "description": "Spoke or hub designation for VNet creation"
                      }
                    }
                  },
                  "variables": {
                    "vnetName": "[format('vnet-{0}-{1}', parameters('discriminator'), parameters('name'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2023-02-01",
                      "name": "[variables('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "privateEndpointNetworkPolicies": "[if(equals(parameters('topology'), 'spoke'), 'Disabled', null())]",
                                "privateLinkServiceNetworkPolicies": "[if(equals(parameters('topology'), 'spoke'), 'Disabled', null())]",
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "networkSecurityGroup": "[if(equals(parameters('topology'), 'spoke'), createObject('id', reference(resourceId('Microsoft.Resources/deployments', format('nsg-{0}-{1}', parameters('discriminator'), parameters('name'))), '2022-09-01').outputs.nsgIds.value[copyIndex('subnets')]), null())]",
                                "delegations": "[if(and(equals(parameters('topology'), 'spoke'), equals(parameters('subnets')[copyIndex('subnets')].name, 'FrontEnd')), createArray(createObject('name', 'MicrosoftWebServerFarms', 'properties', createObject('serviceName', 'Microsoft.Web/serverFarms'))), null())]"
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('nsg-{0}-{1}', parameters('discriminator'), parameters('name')))]"
                      ]
                    },
                    {
                      "condition": "[equals(parameters('topology'), 'spoke')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('nsg-{0}-{1}', parameters('discriminator'), parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "clientName": {
                            "value": "[parameters('name')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "frontDoorPrivateIp": {
                            "value": "10.0.0.0/16"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "13792003035119420994"
                            }
                          },
                          "parameters": {
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the client for the network security groups"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Geographic location for the network security groups"
                              }
                            },
                            "frontDoorPrivateIp": {
                              "type": "string",
                              "metadata": {
                                "description": "CIDR block for the Azure Front Door private IP range for secure access"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-backend', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-VNet-Traffic",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "VirtualNetwork",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "VirtualNetwork",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic within the virtual network for secure communication"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-frontend', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-FrontDoor-Private-IP",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "[parameters('frontDoorPrivateIp')]",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic from Azure Front Door private IP for secure access"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-privatelink', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-FrontDoor-Private-IP",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "[parameters('frontDoorPrivateIp')]",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic from Azure Front Door private IP for secure private link access"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "nsgIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Array of resource IDs for the network security groups created"
                              },
                              "value": [
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-frontend', parameters('discriminator'), parameters('clientName')))]",
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-backend', parameters('discriminator'), parameters('clientName')))]",
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-privatelink', parameters('discriminator'), parameters('clientName')))]"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "The subnet IDs of the virtual network for connectivity and integration"
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": {
                          "name": "[parameters('subnets')[copyIndex()].name]",
                          "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), parameters('subnets')[copyIndex()].name)]"
                        }
                      }
                    },
                    "vnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network for reference"
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "privateDnsZone",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientNames": {
                    "value": "[parameters('clientNames')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "7685150335049268593"
                    }
                  },
                  "parameters": {
                    "clientNames": {
                      "type": "array",
                      "metadata": {
                        "description": "Names of the clients"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Distinguished qualifier for resources"
                      }
                    },
                    "privateDnsZonesMetadata": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "zoneName": "privatelink.azurewebsites.net",
                          "linkType": "app"
                        },
                        {
                          "zoneName": "[format('privatelink.{0}', environment().suffixes.sqlServerHostname)]",
                          "linkType": "sql"
                        },
                        {
                          "zoneName": "privatelink.monitor.azure.com",
                          "linkType": "pai"
                        },
                        {
                          "zoneName": "privatelink.vaultcore.azure.net",
                          "linkType": "pkv"
                        },
                        {
                          "zoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
                          "linkType": "stg"
                        },
                        {
                          "zoneName": "[format('privatelink.file.{0}', environment().suffixes.storage)]",
                          "linkType": "stg"
                        },
                        {
                          "zoneName": "privatelink.insights.azure.com",
                          "linkType": "pai"
                        },
                        {
                          "zoneName": "[format('privatelink.{0}', environment().suffixes.storage)]",
                          "linkType": "stg"
                        }
                      ],
                      "metadata": {
                        "description": "List of Private DNS Zones to create"
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "cleanedZones",
                        "count": "[length(parameters('privateDnsZonesMetadata'))]",
                        "input": {
                          "zoneName": "[replace(parameters('privateDnsZonesMetadata')[copyIndex('cleanedZones')].zoneName, '..', '.')]",
                          "linkType": "[parameters('privateDnsZonesMetadata')[copyIndex('cleanedZones')].linkType]"
                        }
                      },
                      {
                        "name": "dnsLinks",
                        "count": "[length(range(0, mul(length(parameters('clientNames')), length(variables('cleanedZones')))))]",
                        "input": {
                          "clientName": "[parameters('clientNames')[div(range(0, mul(length(parameters('clientNames')), length(variables('cleanedZones'))))[copyIndex('dnsLinks')], length(variables('cleanedZones')))]]",
                          "zone": "[variables('cleanedZones')[mod(range(0, mul(length(parameters('clientNames')), length(variables('cleanedZones'))))[copyIndex('dnsLinks')], length(variables('cleanedZones')))]]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateDnsZones",
                        "count": "[length(variables('cleanedZones'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('cleanedZones')[copyIndex()].zoneName]",
                      "location": "global"
                    },
                    {
                      "copy": {
                        "name": "privateDnsLinksToHub",
                        "count": "[length(variables('cleanedZones'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', variables('cleanedZones')[copyIndex()].zoneName, format('dnsl-{0}-central-{1}', parameters('discriminator'), variables('cleanedZones')[copyIndex()].zoneName))]",
                      "location": "global",
                      "properties": {
                        "virtualNetwork": {
                          "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}-central', parameters('discriminator')))]"
                        },
                        "registrationEnabled": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('cleanedZones')[copyIndex()].zoneName)]",
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('cleanedZones')[copyIndex()].zoneName)]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateDnsLinksToSpoke",
                        "count": "[length(variables('dnsLinks'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', variables('cleanedZones')[indexOf(variables('cleanedZones'), variables('dnsLinks')[copyIndex()].zone)].zoneName, format('dnsl-{0}-{1}-{2}', parameters('discriminator'), variables('dnsLinks')[copyIndex()].clientName, variables('dnsLinks')[copyIndex()].zone.zoneName))]",
                      "location": "global",
                      "properties": {
                        "virtualNetwork": {
                          "id": "[resourceId(format('rg-{0}', variables('dnsLinks')[copyIndex()].clientName), 'Microsoft.Network/virtualNetworks', format('vnet-{0}-{1}', parameters('discriminator'), variables('dnsLinks')[copyIndex()].clientName))]"
                        },
                        "registrationEnabled": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('cleanedZones')[indexOf(variables('cleanedZones'), variables('dnsLinks')[copyIndex()].zone)].zoneName)]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "createDnsRecords",
                        "count": "[length(variables('cleanedZones'))]",
                        "mode": "serial",
                        "batchSize": 3
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('createDnsRecords-{0}-{1}', variables('cleanedZones')[copyIndex()].zoneName, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "clientNames": {
                            "value": "[parameters('clientNames')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "privateDnsZoneName": {
                            "value": "[variables('cleanedZones')[copyIndex()].zoneName]"
                          },
                          "endpointType": {
                            "value": "[variables('cleanedZones')[copyIndex()].linkType]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "10308993898065410561"
                            }
                          },
                          "parameters": {
                            "clientNames": {
                              "type": "array",
                              "metadata": {
                                "description": "List of client names for extracting private endpoint information"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "endpointType": {
                              "type": "string",
                              "metadata": {
                                "description": "Type of endpoint service for DNS record creation"
                              }
                            },
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the private DNS zone where records will be created"
                              }
                            },
                            "timeout": {
                              "type": "int",
                              "defaultValue": 600,
                              "metadata": {
                                "description": "Timeout duration in seconds for the deployment script, defaults to 300 seconds"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deploymentScripts",
                              "apiVersion": "2023-08-01",
                              "name": "[format('create-dns-records-{0}-{1}', parameters('endpointType'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, parameters('endpointType')))]",
                              "location": "[resourceGroup().location]",
                              "kind": "AzureCLI",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', resourceId('rg-Central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                                }
                              },
                              "properties": {
                                "azCliVersion": "2.40.0",
                                "scriptContent": "      #!/bin/bash\n      set -e\n\n      RESOURCE_GROUP=\"rg-central\"\n      DNS_ZONE_NAME=\"$privateDnsZoneName\"\n      SUBSCRIPTION_ID=$(az account show --query id -o tsv)\n\n      echo \"Subscription: $SUBSCRIPTION_ID\"\n      echo \"Resource Group: $RESOURCE_GROUP\"\n      echo \"DNS Zone: $DNS_ZONE_NAME\"\n      echo \"Endpoint Type: $ENDPOINT_TYPE\"\n      echo \"Clients: $clientNames\"\n\n      # Validate subscription context\n      if [ -z \"$SUBSCRIPTION_ID\" ]; then\n        echo \"Error: Subscription ID is empty\"\n        exit 1\n      fi\n      az account set --subscription \"$SUBSCRIPTION_ID\" || {\n        echo \"Error: Failed to set subscription $SUBSCRIPTION_ID\"\n        exit 1\n      }\n\n      # Handle App Service (skipped as AFD-managed)\n      if [ \"$ENDPOINT_TYPE\" = \"app\" ]; then\n        echo \"Skipping App Service DNS - managed by AFD\"\n        echo \"{\\\"privateDnsRecords\\\": \\\"Skipped App Service DNS records, managed by AFD\\\"}\" \\\n          > $AZ_SCRIPTS_OUTPUT_PATH\n        exit 0\n      fi\n\n      # Collect IPs and FQDNs from spoke deployments\n      ALL_IPS=\"\"\n      ALL_FQDNS=\"\"\n      for SPOKE in ${clientNames//,/ }; do\n        echo \"Checking rg-$SPOKE for $ENDPOINT_TYPE...\"\n        # Search for any deployment that starts with extractIp and contains the endpoint type\n        EXTRACT_IP_DEPLOYMENT=$(az deployment group list \\\n          -g \"rg-$SPOKE\" \\\n          --query \"[?starts_with(name, 'extractIp-${SPOKE}-${ENDPOINT_TYPE}')].name\" \\\n          -o tsv 2>/dev/null | head -1)\n        \n        if [ -z \"$EXTRACT_IP_DEPLOYMENT\" ]; then\n          echo \"No extractor deployment found for $SPOKE-$ENDPOINT_TYPE\"\n          continue\n        fi\n          \n        echo \"Found deployment: $EXTRACT_IP_DEPLOYMENT\"\n        IPS=$(az deployment group show \\\n          -g \"rg-$SPOKE\" \\\n          -n \"$EXTRACT_IP_DEPLOYMENT\" \\\n          --query \"properties.outputs.privateIps.value\" \\\n          -o tsv 2>/dev/null || echo \"\")\n        FQDNS=$(az deployment group show \\\n          -g \"rg-$SPOKE\" \\\n          -n \"$EXTRACT_IP_DEPLOYMENT\" \\\n          --query \"properties.outputs.privateFqdns.value\" \\\n          -o tsv 2>/dev/null || echo \"\")\n        ALL_IPS=\"$ALL_IPS,$IPS\"\n        ALL_FQDNS=\"$ALL_FQDNS,$FQDNS\"\n      done\n\n      # Clean and validate collected data\n      IPS=$(echo \"$ALL_IPS\" | tr ',' '\\n' | sort -u | grep -v \"^$\" | tr '\\n' ' ')\n      FQDNS=$(echo \"$ALL_FQDNS\" | tr ',' '\\n' | sort -u | grep -v \"^$\" | tr '\\n' ' ')\n      echo \"Collected IPs: $IPS\"\n      echo \"Collected FQDNs: $FQDNS\"\n\n      if [ -z \"$IPS\" ] || [ -z \"$FQDNS\" ]; then\n        echo \"Error: No valid IPs or FQDNs for $ENDPOINT_TYPE\"\n        echo \"{\\\"privateDnsRecords\\\": \\\"Failed: No valid IPs or FQDNs for $ENDPOINT_TYPE\\\"}\" \\\n          > $AZ_SCRIPTS_OUTPUT_PATH\n        exit 1\n      fi\n\n      # Create DNS A records\n      for fqdn in $FQDNS; do\n        # Remove trailing dots from FQDN if present\n        fqdn=${fqdn%.}\n        for ip in $IPS; do\n          echo \"Checking A record for $fqdn -> $ip...\"\n          if ! az network private-dns record-set a show \\\n            -g \"$RESOURCE_GROUP\" \\\n            -z \"$DNS_ZONE_NAME\" \\\n            -n \"$fqdn\" \\\n            --query \"aRecords[?ipv4Address=='$ip']\" \\\n            -o tsv 2>/dev/null; then\n            echo \"Creating A record for $fqdn -> $ip\"\n            az network private-dns record-set a create \\\n              -g \"$RESOURCE_GROUP\" \\\n              -z \"$DNS_ZONE_NAME\" \\\n              -n \"$fqdn\" \\\n              --ttl 3600 || {\n              echo \"Error: Failed to create A record for $fqdn\"\n              exit 1\n            }\n            az network private-dns record-set a add-record \\\n              -g \"$RESOURCE_GROUP\" \\\n              -z \"$DNS_ZONE_NAME\" \\\n              -n \"$fqdn\" \\\n              --ipv4-address \"$ip\" || {\n              echo \"Error: Failed to add IP $ip to $fqdn\"\n              exit 1\n            }\n          else\n            echo \"A record for $fqdn -> $ip exists, skipping\"\n          fi\n        done\n      done\n\n      echo \"Created DNS records for $ENDPOINT_TYPE\"\n      echo \"{\\\"privateDnsRecords\\\": \\\"Created A records for $ENDPOINT_TYPE\\\"}\" \\\n        > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                                "environmentVariables": [
                                  {
                                    "name": "clientNames",
                                    "value": "[join(parameters('clientNames'), ',')]"
                                  },
                                  {
                                    "name": "ENDPOINT_TYPE",
                                    "value": "[parameters('endpointType')]"
                                  },
                                  {
                                    "name": "privateDnsZoneName",
                                    "value": "[parameters('privateDnsZoneName')]"
                                  }
                                ],
                                "timeout": "[format('PT{0}S', parameters('timeout'))]",
                                "retentionInterval": "PT6H",
                                "cleanupPreference": "Always"
                              },
                              "dependsOn": [
                                "privateIpExtractor"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateIpExtractor",
                                "count": "[length(parameters('clientNames'))]"
                              },
                              "condition": "[not(equals(parameters('endpointType'), 'app'))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('extractIp-{0}-{1}-{2}', parameters('clientNames')[copyIndex()], parameters('endpointType'), uniqueString(resourceGroup().id, deployment().name))]",
                              "resourceGroup": "[format('rg-{0}', parameters('clientNames')[copyIndex()])]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateEndpointId": "[if(equals(parameters('endpointType'), 'stg'), createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientNames')[copyIndex()])), 'Microsoft.Network/privateEndpoints', format('pe-stg{0}{1}', parameters('discriminator'), parameters('clientNames')[copyIndex()]))), createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientNames')[copyIndex()])), 'Microsoft.Network/privateEndpoints', format('pe-{0}-{1}-{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientNames')[copyIndex()]))))]",
                                  "timeout": {
                                    "value": "[parameters('timeout')]"
                                  },
                                  "endpointType": {
                                    "value": "[parameters('endpointType')]"
                                  },
                                  "clientName": {
                                    "value": "[parameters('clientNames')[copyIndex()]]"
                                  },
                                  "discriminator": {
                                    "value": "[parameters('discriminator')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "12147592847880662269"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Resource ID of the Private Endpoint to extract IP and FQDN information"
                                      }
                                    },
                                    "timeout": {
                                      "type": "int",
                                      "defaultValue": 20,
                                      "metadata": {
                                        "description": "Timeout duration in minutes for the script execution"
                                      }
                                    },
                                    "endpointType": {
                                      "type": "string",
                                      "defaultValue": "app",
                                      "allowedValues": [
                                        "app",
                                        "pai",
                                        "law",
                                        "pkv",
                                        "sql",
                                        "stg"
                                      ],
                                      "metadata": {
                                        "description": "Type of service for additional DNS configuration, specifying the resource type"
                                      }
                                    },
                                    "clientName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Client name associated with the Private Endpoint or service"
                                      }
                                    },
                                    "discriminator": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Unique qualifier for resource naming to avoid conflicts"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "endpointName": "[if(equals(parameters('endpointType'), 'stg'), toLower(format('ep-{0}{1}{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientName'))), format('ep-{0}-{1}-{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientName')))]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(equals(parameters('endpointType'), 'app'))]",
                                      "type": "Microsoft.Resources/deploymentScripts",
                                      "apiVersion": "2023-08-01",
                                      "name": "[format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))]",
                                      "kind": "AzureCLI",
                                      "location": "[resourceGroup().location]",
                                      "identity": {
                                        "type": "UserAssigned",
                                        "userAssignedIdentities": {
                                          "[format('{0}', resourceId('rg-central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                                        }
                                      },
                                      "properties": {
                                        "azCliVersion": "2.40.0",
                                        "scriptContent": "      #!/bin/bash\n      set -e\n\n      echo \"Subscription ID: $SUBSCRIPTION_ID\"\n      echo \"Private Endpoint ID: $PRIVATE_ENDPOINT_ID\"\n      echo \"Service Type: $ENDPOINT_TYPE\"\n\n      # Quick subscription check\n      if [ -z \"$SUBSCRIPTION_ID\" ]; then\n        echo \"Error: Subscription ID is empty\"\n        exit 1\n      fi\n      az account set --subscription \"$SUBSCRIPTION_ID\" || {\n        echo \"Error: Failed to set subscription\"\n        exit 1\n      }\n\n      # Get Private IPs with timeout\n      PRIVATE_IPS=$(timeout 120s az network private-endpoint show \\\n        --ids \"$PRIVATE_ENDPOINT_ID\" \\\n        --query \"networkInterfaces[*].ipConfigurations[*].privateIPAddress\" \\\n        -o tsv 2>/dev/null | sort -u | tr '\\n' ',' | sed 's/,$//')\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"No IPs found, checking NICs (limited to first NIC)...\"\n        NIC_ID=$(timeout 60s az network private-endpoint show \\\n          --ids \"$PRIVATE_ENDPOINT_ID\" \\\n          --query \"networkInterfaces[0].id\" \\\n          -o tsv 2>/dev/null)\n        if [ -n \"$NIC_ID\" ]; then\n          PRIVATE_IPS=$(timeout 60s az network nic show \\\n            --ids \"$NIC_ID\" \\\n            --query \"ipConfigurations[?contains(name, 'privateEndpointIpConfig')].privateIpAddress\" \\\n            -o tsv 2>/dev/null | head -n 1)\n        fi\n      fi\n\n      # Validate IPs\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"Error: No valid private IPs found\"\n        exit 1\n      fi\n      VALID_IPS=\"\"\n      for IP in $(echo \"$PRIVATE_IPS\" | tr ',' '\\n'); do\n        if [[ \"$IP\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n          VALID_IPS=\"$VALID_IPS,$IP\"\n        fi\n      done\n      PRIVATE_IPS=$(echo \"$VALID_IPS\" | sed 's/^,//' | tr '\\n' ',' | sed 's/,$//')\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"Error: No valid IPs after validation\"\n        exit 1\n      fi\n\n      # Get Azure environment specific domain suffixes\n      SQL_DOMAIN=$(az cloud show --query 'suffixes.sqlServerHostname' -o tsv)\n      # Remove leading dot if present\n      SQL_DOMAIN=${SQL_DOMAIN#.}\n      STORAGE_DOMAIN=$(az cloud show --query 'suffixes.storage' -o tsv)\n      # Remove leading dot if present\n      STORAGE_DOMAIN=${STORAGE_DOMAIN#.}\n      KV_DOMAIN=$(az cloud show --query 'suffixes.keyVaultDns' -o tsv)\n      # Remove leading dot if present\n      KV_DOMAIN=${KV_DOMAIN#.}\n      MONITOR_DOMAIN=\"privatelink.monitor.azure.com\" # TODO: Get this from Azure CLI when available\n\n      # Generate FQDNs\n      case \"$ENDPOINT_TYPE\" in\n        \"pai\") PRIVATE_FQDNS=\"pai-${DISCRIMINATOR}-${CLIENT_NAME}.${MONITOR_DOMAIN}\" ;;\n        \"sql\") PRIVATE_FQDNS=\"sql-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.${SQL_DOMAIN}\" ;;\n        \"stg\") PRIVATE_FQDNS=\"stg${DISCRIMINATOR}${CLIENT_NAME}.privatelink.blob.${STORAGE_DOMAIN}\" ;;\n        \"pkv\") PRIVATE_FQDNS=\"pkv-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.${KV_DOMAIN}\" ;;\n        \"law\") PRIVATE_FQDNS=\"law-${DISCRIMINATOR}-${CLIENT_NAME}.${MONITOR_DOMAIN}\" ;;\n        \"app\") echo \"Skipping App Service\"; \\\n              echo \"{\\\"privateIps\\\": [], \\\"privateFqdns\\\": []}\" > $AZ_SCRIPTS_OUTPUT_PATH; \\\n              exit 0 ;;\n        *) echo \"Error: Unsupported type $ENDPOINT_TYPE\"; exit 1 ;;\n      esac\n      \n      # Remove trailing dots from FQDNs if present\n      PRIVATE_FQDNS=${PRIVATE_FQDNS%.}\n\n      if [ -z \"$PRIVATE_FQDNS\" ]; then\n        echo \"Error: No FQDNs generated\"\n        exit 1\n      fi\n\n      # Output results\n      echo \"Private IPs: $PRIVATE_IPS\"\n      echo \"Private FQDNs: $PRIVATE_FQDNS\"\n      echo \"{\\\"privateIps\\\": [\\\"${PRIVATE_IPS//,/\\\",\\\"}\\\"], \\\"privateFqdns\\\": [\\\"${PRIVATE_FQDNS//,/\\\",\\\"}\\\"]}\" \\\n        > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                                        "environmentVariables": [
                                          {
                                            "name": "SUBSCRIPTION_ID",
                                            "value": "[subscription().subscriptionId]"
                                          },
                                          {
                                            "name": "PRIVATE_ENDPOINT_ID",
                                            "value": "[parameters('privateEndpointId')]"
                                          },
                                          {
                                            "name": "ENDPOINT_TYPE",
                                            "value": "[parameters('endpointType')]"
                                          },
                                          {
                                            "name": "CLIENT_NAME",
                                            "value": "[parameters('clientName')]"
                                          },
                                          {
                                            "name": "DISCRIMINATOR",
                                            "value": "[parameters('discriminator')]"
                                          },
                                          {
                                            "name": "REGION",
                                            "value": "[resourceGroup().location]"
                                          },
                                          {
                                            "name": "STORAGE_SUFFIX",
                                            "value": "[environment().suffixes.storage]"
                                          }
                                        ],
                                        "timeout": "[format('PT{0}M', parameters('timeout'))]",
                                        "retentionInterval": "PT6H",
                                        "cleanupPreference": "Always"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "privateIps": {
                                      "type": "array",
                                      "value": "[if(not(equals(parameters('endpointType'), 'app')), reference(resourceId('Microsoft.Resources/deploymentScripts', format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))), '2023-08-01').outputs.privateIps, createArray())]"
                                    },
                                    "privateFqdns": {
                                      "type": "array",
                                      "value": "[if(not(equals(parameters('endpointType'), 'app')), reference(resourceId('Microsoft.Resources/deploymentScripts', format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))), '2023-08-01').outputs.privateFqdns, createArray())]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('cleanedZones')[copyIndex()].zoneName)]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'centralVNet')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "firewall",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('firewallName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "subnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'centralVNet'), '2022-09-01').outputs.subnets.value[0].id]"
                  },
                  "dnsServers": {
                    "value": [
                      "168.63.129.16"
                    ]
                  },
                  "enableDnsProxy": {
                    "value": true
                  },
                  "clientSubnets": {
                    "value": "[variables('clientPrivateLinkSubnets')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "8012097176501039699"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Azure Firewall"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location where the Azure Firewall will be deployed"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Subnet ID where the Azure Firewall will be deployed"
                      }
                    },
                    "threatIntelMode": {
                      "type": "string",
                      "defaultValue": "Alert",
                      "allowedValues": [
                        "Off",
                        "Alert",
                        "Deny"
                      ],
                      "metadata": {
                        "description": "Threat intelligence mode for the Azure Firewall"
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "metadata": {
                        "description": "DNS servers for the Azure Firewall"
                      }
                    },
                    "enableDnsProxy": {
                      "type": "bool",
                      "metadata": {
                        "description": "Enable DNS proxy on the Azure Firewall"
                      }
                    },
                    "vmPrivateIp": {
                      "type": "string",
                      "defaultValue": "10.0.2.4",
                      "metadata": {
                        "description": "Private IP address of the VM for SSH access"
                      }
                    },
                    "clientSubnets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Array of client subnet configurations for firewall rules"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags to apply to the Azure Firewall"
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "clientSubnetRules",
                        "count": "[length(parameters('clientSubnets'))]",
                        "input": {
                          "ruleType": "NetworkRule",
                          "name": "[format('AllowToClient{0}', copyIndex('clientSubnetRules'))]",
                          "sourceAddresses": [
                            "10.0.2.0/24"
                          ],
                          "destinationAddresses": [
                            "[parameters('clientSubnets')[copyIndex('clientSubnetRules')]]"
                          ],
                          "ipProtocols": [
                            "Any"
                          ],
                          "destinationPorts": [
                            "*"
                          ]
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-05-01",
                      "name": "[format('ip-{0}', parameters('name'))]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Static"
                      }
                    },
                    {
                      "type": "Microsoft.Network/firewallPolicies",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}-policy', parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "dnsSettings": {
                          "servers": "[parameters('dnsServers')]",
                          "enableProxy": "[parameters('enableDnsProxy')]"
                        },
                        "threatIntelMode": "[parameters('threatIntelMode')]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', format('{0}-policy', parameters('name')), 'DefaultNatRuleCollectionGroup')]",
                      "properties": {
                        "priority": 100,
                        "ruleCollections": [
                          {
                            "ruleCollectionType": "FirewallPolicyNatRuleCollection",
                            "name": "SSHAccess",
                            "priority": 100,
                            "action": {
                              "type": "DNAT"
                            },
                            "rules": [
                              {
                                "ruleType": "NatRule",
                                "name": "SSHToVM",
                                "sourceAddresses": [
                                  "*"
                                ],
                                "destinationAddresses": [
                                  "[reference(resourceId('Microsoft.Network/publicIPAddresses', format('ip-{0}', parameters('name'))), '2021-05-01').ipAddress]"
                                ],
                                "destinationPorts": [
                                  "22"
                                ],
                                "ipProtocols": [
                                  "TCP"
                                ],
                                "translatedAddress": "[parameters('vmPrivateIp')]",
                                "translatedPort": "22"
                              }
                            ]
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/firewallPolicies', format('{0}-policy', parameters('name')))]",
                        "[resourceId('Microsoft.Network/publicIPAddresses', format('ip-{0}', parameters('name')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', format('{0}-policy', parameters('name')), 'DefaultNetworkRuleCollectionGroup')]",
                      "properties": {
                        "priority": 200,
                        "ruleCollections": [
                          {
                            "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                            "name": "AllowDNSAndARMAndSSH",
                            "priority": 200,
                            "action": {
                              "type": "Allow"
                            },
                            "rules": [
                              {
                                "ruleType": "NetworkRule",
                                "name": "AllowDNSResolver",
                                "sourceAddresses": [
                                  "10.0.2.0/24"
                                ],
                                "destinationAddresses": [
                                  "168.63.129.16"
                                ],
                                "ipProtocols": [
                                  "TCP",
                                  "UDP"
                                ],
                                "destinationPorts": [
                                  "53"
                                ]
                              },
                              {
                                "ruleType": "NetworkRule",
                                "name": "AllowManagement",
                                "sourceAddresses": [
                                  "10.0.2.0/24"
                                ],
                                "destinationAddresses": [
                                  "AzureResourceManager"
                                ],
                                "ipProtocols": [
                                  "TCP"
                                ],
                                "destinationPorts": [
                                  "443"
                                ]
                              },
                              {
                                "ruleType": "NetworkRule",
                                "name": "AllowVMOutbound",
                                "sourceAddresses": [
                                  "10.0.2.0/24"
                                ],
                                "destinationAddresses": [
                                  "*"
                                ],
                                "ipProtocols": [
                                  "TCP"
                                ],
                                "destinationPorts": [
                                  "*"
                                ]
                              },
                              {
                                "ruleType": "NetworkRule",
                                "name": "AllowAllProtocolsToClients",
                                "sourceAddresses": [
                                  "10.0.2.0/24"
                                ],
                                "destinationAddresses": [
                                  "10.0.0.0/8"
                                ],
                                "ipProtocols": [
                                  "Any"
                                ],
                                "destinationPorts": [
                                  "*"
                                ]
                              },
                              {
                                "ruleType": "NetworkRule",
                                "name": "AllowVPNInbound",
                                "sourceAddresses": [
                                  "*"
                                ],
                                "destinationAddresses": [
                                  "10.0.3.0/26"
                                ],
                                "ipProtocols": [
                                  "UDP",
                                  "TCP"
                                ],
                                "destinationPorts": [
                                  "500",
                                  "4500",
                                  "1701",
                                  "1723",
                                  "443"
                                ]
                              },
                              {
                                "ruleType": "NetworkRule",
                                "name": "AllowVPNClientTraffic",
                                "sourceAddresses": [
                                  "172.16.0.0/24"
                                ],
                                "destinationAddresses": [
                                  "*"
                                ],
                                "ipProtocols": [
                                  "Any"
                                ],
                                "destinationPorts": [
                                  "*"
                                ]
                              }
                            ]
                          },
                          {
                            "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                            "name": "ClientSpecificRules",
                            "priority": 210,
                            "action": {
                              "type": "Allow"
                            },
                            "rules": "[variables('clientSubnetRules')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/firewallPolicies', format('{0}-policy', parameters('name')))]",
                        "[resourceId('Microsoft.Network/firewallPolicies/ruleCollectionGroups', format('{0}-policy', parameters('name')), 'DefaultNatRuleCollectionGroup')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/azureFirewalls",
                      "apiVersion": "2022-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "[format('ipconfig-{0}', parameters('name'))]",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('subnetId')]"
                              },
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('ip-{0}', parameters('name')))]"
                              }
                            }
                          }
                        ],
                        "firewallPolicy": {
                          "id": "[resourceId('Microsoft.Network/firewallPolicies', format('{0}-policy', parameters('name')))]"
                        }
                      },
                      "tags": "[parameters('tags')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/firewallPolicies', format('{0}-policy', parameters('name')))]",
                        "[resourceId('Microsoft.Network/firewallPolicies/ruleCollectionGroups', format('{0}-policy', parameters('name')), 'DefaultNatRuleCollectionGroup')]",
                        "[resourceId('Microsoft.Network/firewallPolicies/ruleCollectionGroups', format('{0}-policy', parameters('name')), 'DefaultNetworkRuleCollectionGroup')]",
                        "[resourceId('Microsoft.Network/publicIPAddresses', format('ip-{0}', parameters('name')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Azure Firewall"
                      },
                      "value": "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Azure Firewall"
                      },
                      "value": "[parameters('name')]"
                    },
                    "publicIp": {
                      "type": "string",
                      "metadata": {
                        "description": "The public IP configuration of the Azure Firewall"
                      },
                      "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2022-05-01').ipConfigurations[0].properties.publicIPAddress.id]"
                    },
                    "privateIp": {
                      "type": "string",
                      "metadata": {
                        "description": "The private IP of the Azure Firewall"
                      },
                      "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2022-05-01').ipConfigurations[0].properties.privateIPAddress]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'centralVNet')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "sentinel",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('sentinelWorkspaceName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "3218942024624621110"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Geographic location for the Sentinel (Log Analytics) workspace"
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Sentinel (Log Analytics) workspace for monitoring"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "sku": {
                          "name": "PerGB2018"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed Log Analytics Workspace"
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'centralVNet')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "frontDoor",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('frontDoorName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "10834916497582131726"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Azure Front Door instance for global traffic management"
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "Premium_AzureFrontDoor",
                      "allowedValues": [
                        "Premium_AzureFrontDoor"
                      ],
                      "metadata": {
                        "description": "SKU tier for the Azure Front Door, restricted to Premium for Private Link support"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the Azure Front Door instance"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Cdn/profiles",
                      "apiVersion": "2024-02-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "sku": {
                        "name": "[parameters('skuTier')]"
                      },
                      "properties": {
                        "originResponseTimeoutSeconds": 60
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed Azure Front Door instance"
                      },
                      "value": "[resourceId('Microsoft.Cdn/profiles', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Azure Front Door instance for reference"
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'centralVNet')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', 'centralResourceGroup')]",
        "clientResources"
      ]
    },
    {
      "copy": {
        "name": "clientResources",
        "count": "[length(parameters('clients'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-resources', parameters('clients')[copyIndex()].name)]",
      "resourceGroup": "[format('rg-{0}', parameters('clients')[copyIndex()].name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clientName": {
            "value": "[parameters('clients')[copyIndex()].name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "cidr": {
            "value": "[parameters('clients')[copyIndex()].cidr]"
          },
          "subnets": {
            "value": "[parameters('clients')[copyIndex()].subnets]"
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "13237793203783181283"
            }
          },
          "parameters": {
            "clientName": {
              "type": "string",
              "metadata": {
                "description": "Name of the client for resource deployment"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for client-specific resources"
              }
            },
            "cidr": {
              "type": "string",
              "metadata": {
                "description": "CIDR block for the client VNet"
              }
            },
            "subnets": {
              "type": "object",
              "metadata": {
                "description": "Subnet configuration for the client VNet"
              }
            },
            "discriminator": {
              "type": "string",
              "metadata": {
                "description": "Unique qualifier for resource naming to avoid conflicts"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('clientName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "addressPrefixes": {
                    "value": [
                      "[parameters('cidr')]"
                    ]
                  },
                  "topology": {
                    "value": "spoke"
                  },
                  "subnets": {
                    "value": [
                      {
                        "name": "FrontEnd",
                        "addressPrefix": "[parameters('subnets').frontEnd]"
                      },
                      {
                        "name": "BackEnd",
                        "addressPrefix": "[parameters('subnets').backEnd]"
                      },
                      {
                        "name": "PrivateLink",
                        "addressPrefix": "[parameters('subnets').privateLink]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "16722299546444263991"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Creates a virtual network with the specified naming"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Geographic location for all resources"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Address prefixes for the virtual network"
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Subnet configuration for the virtual network"
                      }
                    },
                    "topology": {
                      "type": "string",
                      "allowedValues": [
                        "hub",
                        "spoke"
                      ],
                      "metadata": {
                        "description": "Spoke or hub designation for VNet creation"
                      }
                    }
                  },
                  "variables": {
                    "vnetName": "[format('vnet-{0}-{1}', parameters('discriminator'), parameters('name'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2023-02-01",
                      "name": "[variables('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "privateEndpointNetworkPolicies": "[if(equals(parameters('topology'), 'spoke'), 'Disabled', null())]",
                                "privateLinkServiceNetworkPolicies": "[if(equals(parameters('topology'), 'spoke'), 'Disabled', null())]",
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "networkSecurityGroup": "[if(equals(parameters('topology'), 'spoke'), createObject('id', reference(resourceId('Microsoft.Resources/deployments', format('nsg-{0}-{1}', parameters('discriminator'), parameters('name'))), '2022-09-01').outputs.nsgIds.value[copyIndex('subnets')]), null())]",
                                "delegations": "[if(and(equals(parameters('topology'), 'spoke'), equals(parameters('subnets')[copyIndex('subnets')].name, 'FrontEnd')), createArray(createObject('name', 'MicrosoftWebServerFarms', 'properties', createObject('serviceName', 'Microsoft.Web/serverFarms'))), null())]"
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('nsg-{0}-{1}', parameters('discriminator'), parameters('name')))]"
                      ]
                    },
                    {
                      "condition": "[equals(parameters('topology'), 'spoke')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('nsg-{0}-{1}', parameters('discriminator'), parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "clientName": {
                            "value": "[parameters('name')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "frontDoorPrivateIp": {
                            "value": "10.0.0.0/16"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "13792003035119420994"
                            }
                          },
                          "parameters": {
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the client for the network security groups"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Geographic location for the network security groups"
                              }
                            },
                            "frontDoorPrivateIp": {
                              "type": "string",
                              "metadata": {
                                "description": "CIDR block for the Azure Front Door private IP range for secure access"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-backend', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-VNet-Traffic",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "VirtualNetwork",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "VirtualNetwork",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic within the virtual network for secure communication"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-frontend', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-FrontDoor-Private-IP",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "[parameters('frontDoorPrivateIp')]",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic from Azure Front Door private IP for secure access"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-privatelink', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-FrontDoor-Private-IP",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "[parameters('frontDoorPrivateIp')]",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic from Azure Front Door private IP for secure private link access"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "nsgIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Array of resource IDs for the network security groups created"
                              },
                              "value": [
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-frontend', parameters('discriminator'), parameters('clientName')))]",
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-backend', parameters('discriminator'), parameters('clientName')))]",
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-privatelink', parameters('discriminator'), parameters('clientName')))]"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "The subnet IDs of the virtual network for connectivity and integration"
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": {
                          "name": "[parameters('subnets')[copyIndex()].name]",
                          "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), parameters('subnets')[copyIndex()].name)]"
                        }
                      }
                    },
                    "vnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network for reference"
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('asp-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('asp-{0}-{1}', parameters('discriminator'), parameters('clientName'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sku": {
                    "value": {
                      "name": "S1",
                      "tier": "Standard",
                      "size": "S1",
                      "capacity": 1
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "10601726760920605906"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the App Service Plan for the client application"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Geographic location where the App Service Plan will be deployed"
                      }
                    },
                    "sku": {
                      "type": "object",
                      "defaultValue": {
                        "name": "S1",
                        "tier": "Standard",
                        "size": "S1",
                        "capacity": 2
                      },
                      "metadata": {
                        "description": "SKU configuration defining the performance tier for the App Service Plan"
                      }
                    },
                    "isLinux": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Indicates whether the App Service Plan is configured for Linux, defaults to false"
                      }
                    },
                    "maximumElasticWorkerCount": {
                      "type": "int",
                      "defaultValue": 10,
                      "metadata": {
                        "description": "Maximum number of instances allowed for the App Service Plan for scalability"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the App Service Plan"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/serverfarms",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": "[parameters('sku')]",
                      "properties": {
                        "reserved": "[parameters('isLinux')]",
                        "maximumElasticWorkerCount": "[parameters('maximumElasticWorkerCount')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed App Service Plan"
                      },
                      "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the App Service Plan for reference"
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('app-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "subnetId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2022-09-01').outputs.subnets.value[0].id]"
                  },
                  "appServicePlanId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('asp-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2022-09-01').outputs.id.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "3042637355955528326"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the client for the App Service"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Subnet ID for VNet integration to enable private network access (FrontEnd subnet)"
                      }
                    },
                    "appServicePlanId": {
                      "type": "string",
                      "metadata": {
                        "description": "ID of the App Service Plan to associate with this App Service"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags to apply to the App Service for organization and billing"
                      }
                    },
                    "appSettings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Environment variables (App Settings) for configuring the App Service"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2022-03-01",
                      "name": "[format('app-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "serverFarmId": "[parameters('appServicePlanId')]",
                        "publicNetworkAccess": "Enabled",
                        "siteConfig": {
                          "copy": [
                            {
                              "name": "appSettings",
                              "count": "[length(parameters('appSettings'))]",
                              "input": {
                                "name": "[parameters('appSettings')[copyIndex('appSettings')].name]",
                                "value": "[parameters('appSettings')[copyIndex('appSettings')].value]"
                              }
                            }
                          ],
                          "vnetRouteAllEnabled": true,
                          "scmIpSecurityRestrictionsUseMain": true,
                          "ipSecurityRestrictions": [
                            {
                              "name": "AllowPrivateSubnet",
                              "priority": 100,
                              "action": "Allow",
                              "vnetSubnetResourceId": "[parameters('subnetId')]",
                              "description": "Allow traffic from the FrontEnd subnet for secure access"
                            },
                            {
                              "name": "DenyPublic",
                              "priority": 200,
                              "action": "Deny",
                              "ipAddress": "0.0.0.0/0",
                              "description": "Deny all public internet access"
                            }
                          ]
                        },
                        "httpsOnly": true
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Web/sites/networkConfig",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'virtualNetwork')]",
                      "properties": {
                        "subnetResourceId": "[parameters('subnetId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'web')]",
                      "properties": {
                        "ipSecurityRestrictions": [
                          {
                            "name": "AllowVNetOnly",
                            "action": "Allow",
                            "priority": 100,
                            "vnetSubnetResourceId": "[parameters('subnetId')]",
                            "description": "Allow traffic only from the FrontEnd VNet for enhanced isolation"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                        "[resourceId('Microsoft.Web/sites/networkConfig', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'virtualNetwork')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed App Service"
                      },
                      "value": "[resourceId('Microsoft.Web/sites', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "defaultHostName": {
                      "type": "string",
                      "metadata": {
                        "description": "The default URL of the App Service"
                      },
                      "value": "[reference(resourceId('Microsoft.Web/sites', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2022-03-01').defaultHostName]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the App Service for reference"
                      },
                      "value": "[format('app-{0}-{1}', parameters('discriminator'), parameters('clientName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('asp-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "adminLogin": {
                    "value": "adminUser"
                  },
                  "adminPassword": {
                    "value": "Password@123!"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "703255344866134639"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the SQL Server instance for the client"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the SQL Server instance"
                      }
                    },
                    "adminLogin": {
                      "type": "string",
                      "metadata": {
                        "description": "Administrator login credential for the SQL Server"
                      }
                    },
                    "adminPassword": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Administrator password credential for the SQL Server, marked as secure"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Sql/servers",
                      "apiVersion": "2021-05-01-preview",
                      "name": "[format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publicNetworkAccess": "Disabled",
                        "administratorLogin": "[parameters('adminLogin')]",
                        "administratorLoginPassword": "[parameters('adminPassword')]"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('pe-{0}', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "clientName": {
                            "value": "[parameters('clientName')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "name": {
                            "value": "[format('pe-{0}', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "privateLinkServiceId": {
                            "value": "[resourceId('Microsoft.Sql/servers', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "groupId": {
                            "value": "sqlServer"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "8916153214771809304"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private Endpoint for the target resource"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the target service for the Private Link connection"
                              }
                            },
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Client name associated with the Private Endpoint"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Group ID specifying the type of resource (e.g., blob, sqlServer, vault, insights)"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Tags to apply to the Private Endpoint for organization and billing"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "subnet": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Network/virtualNetworks/subnets', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'privateLink')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('plsc-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('groupId')]"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed Private Endpoint"
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the SQL Server instance"
                      },
                      "value": "[resourceId('Microsoft.Sql/servers', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "privateEndpointId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Private Endpoint for SQL Server"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('pe-{0}', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('stg{0}{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "7025526779572649880"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the client for the Storage Account"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard_LRS",
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS"
                      ],
                      "metadata": {
                        "description": "Replication type for the Storage Account, defaults to Standard_LRS"
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "metadata": {
                        "description": "Type of Storage Account, defaults to general-purpose V2"
                      }
                    },
                    "enableBlobSoftDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Flag to enable blob soft delete retention policy for data recovery"
                      }
                    },
                    "blobSoftDeleteRetentionDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Retention period in days for blob soft delete, defaults to disabled"
                      }
                    },
                    "enableContainerSoftDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Flag to enable container soft delete retention policy for data recovery"
                      }
                    },
                    "containerSoftDeleteRetentionDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Retention period in days for container soft delete, defaults to disabled"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the Storage Account"
                      }
                    }
                  },
                  "variables": {
                    "storageAccountName": "[toLower(format('stg{0}{1}', parameters('discriminator'), parameters('clientName')))]",
                    "privateEndpointName": "[format('pe-{0}', variables('storageAccountName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[variables('storageAccountName')]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "supportsHttpsTrafficOnly": true
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
                      "properties": {
                        "deleteRetentionPolicy": "[if(greater(parameters('blobSoftDeleteRetentionDays'), 0), createObject('enabled', parameters('enableBlobSoftDelete'), 'days', parameters('blobSoftDeleteRetentionDays')), createObject('enabled', false()))]",
                        "containerDeleteRetentionPolicy": "[if(greater(parameters('containerSoftDeleteRetentionDays'), 0), createObject('enabled', parameters('enableContainerSoftDelete'), 'days', parameters('containerSoftDeleteRetentionDays')), createObject('enabled', false()))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[variables('privateEndpointName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "clientName": {
                            "value": "[parameters('clientName')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "name": {
                            "value": "[variables('privateEndpointName')]"
                          },
                          "privateLinkServiceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                          },
                          "groupId": {
                            "value": "blob"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "8916153214771809304"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private Endpoint for the target resource"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the target service for the Private Link connection"
                              }
                            },
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Client name associated with the Private Endpoint"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Group ID specifying the type of resource (e.g., blob, sqlServer, vault, insights)"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Tags to apply to the Private Endpoint for organization and billing"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "subnet": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Network/virtualNetworks/subnets', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'privateLink')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('plsc-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('groupId')]"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed Private Endpoint"
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Storage Account"
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Storage Account for reference"
                      },
                      "value": "[variables('storageAccountName')]"
                    },
                    "primaryEndpoints": {
                      "type": "object",
                      "metadata": {
                        "description": "The primary endpoints of the Storage Account for connectivity"
                      },
                      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').primaryEndpoints]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "233592358594744818"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the client for the Key Vault instance"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "standard",
                      "allowedValues": [
                        "standard",
                        "premium"
                      ],
                      "metadata": {
                        "description": "SKU of the Key Vault, defaults to standard"
                      }
                    },
                    "accessPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Access policies defining permissions for administrators or applications"
                      }
                    },
                    "softDeleteRetentionDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "metadata": {
                        "description": "Soft delete retention period in days, minimum 7 days for recovery"
                      }
                    },
                    "enablePurgeProtection": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Flag to enable purge protection for enhanced security"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the Key Vault instance"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "sku": {
                          "family": "A",
                          "name": "[parameters('skuName')]"
                        },
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": "[parameters('accessPolicies')]",
                        "enableSoftDelete": true,
                        "softDeleteRetentionInDays": "[parameters('softDeleteRetentionDays')]",
                        "enablePurgeProtection": "[parameters('enablePurgeProtection')]"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('pe-{0}', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "clientName": {
                            "value": "[parameters('clientName')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "name": {
                            "value": "[format('pe-{0}', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "privateLinkServiceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "groupId": {
                            "value": "vault"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "8916153214771809304"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private Endpoint for the target resource"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the target service for the Private Link connection"
                              }
                            },
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Client name associated with the Private Endpoint"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Group ID specifying the type of resource (e.g., blob, sqlServer, vault, insights)"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Tags to apply to the Private Endpoint for organization and billing"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "subnet": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Network/virtualNetworks/subnets', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'privateLink')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('plsc-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('groupId')]"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed Private Endpoint"
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed Key Vault instance"
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "vaultUri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the Key Vault for accessing secrets, keys, and certificates"
                      },
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2022-07-01').vaultUri]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Key Vault instance for reference"
                      },
                      "value": "[format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "enablePrivateLinkScope": {
                    "value": true
                  },
                  "enablePrivateLink": {
                    "value": true
                  },
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "6890778167178666352"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the client for the Application Insights instance"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "applicationType": {
                      "type": "string",
                      "defaultValue": "web",
                      "allowedValues": [
                        "web",
                        "other",
                        "java",
                        "node.js"
                      ],
                      "metadata": {
                        "description": "Type of application for Application Insights monitoring"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the Application Insights instance"
                      }
                    },
                    "enablePrivateLinkScope": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Flag to enable Private Link Scope integration for enhanced security"
                      }
                    },
                    "restrictPublicAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Flag to restrict public access to Application Insights for security"
                      }
                    },
                    "enablePrivateLink": {
                      "type": "bool",
                      "metadata": {
                        "description": "Flag to enable Private Link for the Application Insights instance"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "[resourceGroup().location]",
                      "kind": "[parameters('applicationType')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "Application_Type": "[parameters('applicationType')]",
                        "publicNetworkAccessForIngestion": "[if(parameters('restrictPublicAccess'), 'Disabled', 'Enabled')]",
                        "publicNetworkAccessForQuery": "[if(parameters('restrictPublicAccess'), 'Disabled', 'Enabled')]",
                        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('law-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                        "IngestionMode": "LogAnalytics"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', format('law-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2023-09-01",
                      "name": "[format('law-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "retentionInDays": 30,
                        "sku": {
                          "name": "PerGB2018"
                        }
                      }
                    },
                    {
                      "condition": "[parameters('enablePrivateLinkScope')]",
                      "type": "microsoft.insights/privateLinkScopes",
                      "apiVersion": "2021-07-01-preview",
                      "name": "[format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "global",
                      "properties": {
                        "accessModeSettings": {
                          "ingestionAccessMode": "PrivateOnly",
                          "queryAccessMode": "PrivateOnly"
                        }
                      }
                    },
                    {
                      "condition": "[parameters('enablePrivateLink')]",
                      "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                      "apiVersion": "2021-07-01-preview",
                      "name": "[format('{0}/{1}', format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName')), format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                      "properties": {
                        "linkedResourceId": "[resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                        "[resourceId('microsoft.insights/privateLinkScopes', format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enablePrivateLink')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('pe-{0}', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "clientName": {
                            "value": "[parameters('clientName')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "name": {
                            "value": "[format('pe-{0}', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "privateLinkServiceId": {
                            "value": "[resourceId('microsoft.insights/privateLinkScopes', format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "groupId": {
                            "value": "azuremonitor"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "8916153214771809304"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private Endpoint for the target resource"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the target service for the Private Link connection"
                              }
                            },
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Client name associated with the Private Endpoint"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Group ID specifying the type of resource (e.g., blob, sqlServer, vault, insights)"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Tags to apply to the Private Endpoint for organization and billing"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "subnet": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Network/virtualNetworks/subnets', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'privateLink')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('plsc-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('groupId')]"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed Private Endpoint"
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                        "[resourceId('microsoft.insights/privateLinkScopes', format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Application Insights instance"
                      },
                      "value": "[resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "instrumentationKey": {
                      "type": "string",
                      "metadata": {
                        "description": "The instrumentation key for Application Insights monitoring"
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2020-02-02').InstrumentationKey]"
                    },
                    "connectionString": {
                      "type": "string",
                      "metadata": {
                        "description": "The connection string for Application Insights connectivity"
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2020-02-02').ConnectionString]"
                    },
                    "appInsightsId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Application Insights instance for reference"
                      },
                      "value": "[resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "privateLinkScopeId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Private Link Scope, if enabled"
                      },
                      "value": "[if(parameters('enablePrivateLinkScope'), resourceId('microsoft.insights/privateLinkScopes', format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '')]"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the associated Log Analytics Workspace"
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', format('law-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "privateEndpointId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Private Endpoint for App Insights, if enabled"
                      },
                      "value": "[if(parameters('enablePrivateLink'), reference(resourceId('Microsoft.Resources/deployments', format('pe-{0}', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))), '2022-09-01').outputs.id.value, '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "clientResourceGroups"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "privateDnsZone",
      "resourceGroup": "rg-central",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clientNames": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('clients'))]",
                "input": "[parameters('clients')[copyIndex('value')].name]"
              }
            ]
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "7685150335049268593"
            }
          },
          "parameters": {
            "clientNames": {
              "type": "array",
              "metadata": {
                "description": "Names of the clients"
              }
            },
            "discriminator": {
              "type": "string",
              "metadata": {
                "description": "Distinguished qualifier for resources"
              }
            },
            "privateDnsZonesMetadata": {
              "type": "array",
              "defaultValue": [
                {
                  "zoneName": "privatelink.azurewebsites.net",
                  "linkType": "app"
                },
                {
                  "zoneName": "[format('privatelink.{0}', environment().suffixes.sqlServerHostname)]",
                  "linkType": "sql"
                },
                {
                  "zoneName": "privatelink.monitor.azure.com",
                  "linkType": "pai"
                },
                {
                  "zoneName": "privatelink.vaultcore.azure.net",
                  "linkType": "pkv"
                },
                {
                  "zoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
                  "linkType": "stg"
                },
                {
                  "zoneName": "[format('privatelink.file.{0}', environment().suffixes.storage)]",
                  "linkType": "stg"
                },
                {
                  "zoneName": "privatelink.insights.azure.com",
                  "linkType": "pai"
                },
                {
                  "zoneName": "[format('privatelink.{0}', environment().suffixes.storage)]",
                  "linkType": "stg"
                }
              ],
              "metadata": {
                "description": "List of Private DNS Zones to create"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "cleanedZones",
                "count": "[length(parameters('privateDnsZonesMetadata'))]",
                "input": {
                  "zoneName": "[replace(parameters('privateDnsZonesMetadata')[copyIndex('cleanedZones')].zoneName, '..', '.')]",
                  "linkType": "[parameters('privateDnsZonesMetadata')[copyIndex('cleanedZones')].linkType]"
                }
              },
              {
                "name": "dnsLinks",
                "count": "[length(range(0, mul(length(parameters('clientNames')), length(variables('cleanedZones')))))]",
                "input": {
                  "clientName": "[parameters('clientNames')[div(range(0, mul(length(parameters('clientNames')), length(variables('cleanedZones'))))[copyIndex('dnsLinks')], length(variables('cleanedZones')))]]",
                  "zone": "[variables('cleanedZones')[mod(range(0, mul(length(parameters('clientNames')), length(variables('cleanedZones'))))[copyIndex('dnsLinks')], length(variables('cleanedZones')))]]"
                }
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "privateDnsZones",
                "count": "[length(variables('cleanedZones'))]"
              },
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('cleanedZones')[copyIndex()].zoneName]",
              "location": "global"
            },
            {
              "copy": {
                "name": "privateDnsLinksToHub",
                "count": "[length(variables('cleanedZones'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('cleanedZones')[copyIndex()].zoneName, format('dnsl-{0}-central-{1}', parameters('discriminator'), variables('cleanedZones')[copyIndex()].zoneName))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}-central', parameters('discriminator')))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('cleanedZones')[copyIndex()].zoneName)]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('cleanedZones')[copyIndex()].zoneName)]"
              ]
            },
            {
              "copy": {
                "name": "privateDnsLinksToSpoke",
                "count": "[length(variables('dnsLinks'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('cleanedZones')[indexOf(variables('cleanedZones'), variables('dnsLinks')[copyIndex()].zone)].zoneName, format('dnsl-{0}-{1}-{2}', parameters('discriminator'), variables('dnsLinks')[copyIndex()].clientName, variables('dnsLinks')[copyIndex()].zone.zoneName))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId(format('rg-{0}', variables('dnsLinks')[copyIndex()].clientName), 'Microsoft.Network/virtualNetworks', format('vnet-{0}-{1}', parameters('discriminator'), variables('dnsLinks')[copyIndex()].clientName))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('cleanedZones')[indexOf(variables('cleanedZones'), variables('dnsLinks')[copyIndex()].zone)].zoneName)]"
              ]
            },
            {
              "copy": {
                "name": "createDnsRecords",
                "count": "[length(variables('cleanedZones'))]",
                "mode": "serial",
                "batchSize": 3
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('createDnsRecords-{0}-{1}', variables('cleanedZones')[copyIndex()].zoneName, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientNames": {
                    "value": "[parameters('clientNames')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "privateDnsZoneName": {
                    "value": "[variables('cleanedZones')[copyIndex()].zoneName]"
                  },
                  "endpointType": {
                    "value": "[variables('cleanedZones')[copyIndex()].linkType]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "10308993898065410561"
                    }
                  },
                  "parameters": {
                    "clientNames": {
                      "type": "array",
                      "metadata": {
                        "description": "List of client names for extracting private endpoint information"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "endpointType": {
                      "type": "string",
                      "metadata": {
                        "description": "Type of endpoint service for DNS record creation"
                      }
                    },
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the private DNS zone where records will be created"
                      }
                    },
                    "timeout": {
                      "type": "int",
                      "defaultValue": 600,
                      "metadata": {
                        "description": "Timeout duration in seconds for the deployment script, defaults to 300 seconds"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2023-08-01",
                      "name": "[format('create-dns-records-{0}-{1}', parameters('endpointType'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, parameters('endpointType')))]",
                      "location": "[resourceGroup().location]",
                      "kind": "AzureCLI",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('rg-Central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                        }
                      },
                      "properties": {
                        "azCliVersion": "2.40.0",
                        "scriptContent": "      #!/bin/bash\n      set -e\n\n      RESOURCE_GROUP=\"rg-central\"\n      DNS_ZONE_NAME=\"$privateDnsZoneName\"\n      SUBSCRIPTION_ID=$(az account show --query id -o tsv)\n\n      echo \"Subscription: $SUBSCRIPTION_ID\"\n      echo \"Resource Group: $RESOURCE_GROUP\"\n      echo \"DNS Zone: $DNS_ZONE_NAME\"\n      echo \"Endpoint Type: $ENDPOINT_TYPE\"\n      echo \"Clients: $clientNames\"\n\n      # Validate subscription context\n      if [ -z \"$SUBSCRIPTION_ID\" ]; then\n        echo \"Error: Subscription ID is empty\"\n        exit 1\n      fi\n      az account set --subscription \"$SUBSCRIPTION_ID\" || {\n        echo \"Error: Failed to set subscription $SUBSCRIPTION_ID\"\n        exit 1\n      }\n\n      # Handle App Service (skipped as AFD-managed)\n      if [ \"$ENDPOINT_TYPE\" = \"app\" ]; then\n        echo \"Skipping App Service DNS - managed by AFD\"\n        echo \"{\\\"privateDnsRecords\\\": \\\"Skipped App Service DNS records, managed by AFD\\\"}\" \\\n          > $AZ_SCRIPTS_OUTPUT_PATH\n        exit 0\n      fi\n\n      # Collect IPs and FQDNs from spoke deployments\n      ALL_IPS=\"\"\n      ALL_FQDNS=\"\"\n      for SPOKE in ${clientNames//,/ }; do\n        echo \"Checking rg-$SPOKE for $ENDPOINT_TYPE...\"\n        # Search for any deployment that starts with extractIp and contains the endpoint type\n        EXTRACT_IP_DEPLOYMENT=$(az deployment group list \\\n          -g \"rg-$SPOKE\" \\\n          --query \"[?starts_with(name, 'extractIp-${SPOKE}-${ENDPOINT_TYPE}')].name\" \\\n          -o tsv 2>/dev/null | head -1)\n        \n        if [ -z \"$EXTRACT_IP_DEPLOYMENT\" ]; then\n          echo \"No extractor deployment found for $SPOKE-$ENDPOINT_TYPE\"\n          continue\n        fi\n          \n        echo \"Found deployment: $EXTRACT_IP_DEPLOYMENT\"\n        IPS=$(az deployment group show \\\n          -g \"rg-$SPOKE\" \\\n          -n \"$EXTRACT_IP_DEPLOYMENT\" \\\n          --query \"properties.outputs.privateIps.value\" \\\n          -o tsv 2>/dev/null || echo \"\")\n        FQDNS=$(az deployment group show \\\n          -g \"rg-$SPOKE\" \\\n          -n \"$EXTRACT_IP_DEPLOYMENT\" \\\n          --query \"properties.outputs.privateFqdns.value\" \\\n          -o tsv 2>/dev/null || echo \"\")\n        ALL_IPS=\"$ALL_IPS,$IPS\"\n        ALL_FQDNS=\"$ALL_FQDNS,$FQDNS\"\n      done\n\n      # Clean and validate collected data\n      IPS=$(echo \"$ALL_IPS\" | tr ',' '\\n' | sort -u | grep -v \"^$\" | tr '\\n' ' ')\n      FQDNS=$(echo \"$ALL_FQDNS\" | tr ',' '\\n' | sort -u | grep -v \"^$\" | tr '\\n' ' ')\n      echo \"Collected IPs: $IPS\"\n      echo \"Collected FQDNs: $FQDNS\"\n\n      if [ -z \"$IPS\" ] || [ -z \"$FQDNS\" ]; then\n        echo \"Error: No valid IPs or FQDNs for $ENDPOINT_TYPE\"\n        echo \"{\\\"privateDnsRecords\\\": \\\"Failed: No valid IPs or FQDNs for $ENDPOINT_TYPE\\\"}\" \\\n          > $AZ_SCRIPTS_OUTPUT_PATH\n        exit 1\n      fi\n\n      # Create DNS A records\n      for fqdn in $FQDNS; do\n        # Remove trailing dots from FQDN if present\n        fqdn=${fqdn%.}\n        for ip in $IPS; do\n          echo \"Checking A record for $fqdn -> $ip...\"\n          if ! az network private-dns record-set a show \\\n            -g \"$RESOURCE_GROUP\" \\\n            -z \"$DNS_ZONE_NAME\" \\\n            -n \"$fqdn\" \\\n            --query \"aRecords[?ipv4Address=='$ip']\" \\\n            -o tsv 2>/dev/null; then\n            echo \"Creating A record for $fqdn -> $ip\"\n            az network private-dns record-set a create \\\n              -g \"$RESOURCE_GROUP\" \\\n              -z \"$DNS_ZONE_NAME\" \\\n              -n \"$fqdn\" \\\n              --ttl 3600 || {\n              echo \"Error: Failed to create A record for $fqdn\"\n              exit 1\n            }\n            az network private-dns record-set a add-record \\\n              -g \"$RESOURCE_GROUP\" \\\n              -z \"$DNS_ZONE_NAME\" \\\n              -n \"$fqdn\" \\\n              --ipv4-address \"$ip\" || {\n              echo \"Error: Failed to add IP $ip to $fqdn\"\n              exit 1\n            }\n          else\n            echo \"A record for $fqdn -> $ip exists, skipping\"\n          fi\n        done\n      done\n\n      echo \"Created DNS records for $ENDPOINT_TYPE\"\n      echo \"{\\\"privateDnsRecords\\\": \\\"Created A records for $ENDPOINT_TYPE\\\"}\" \\\n        > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                        "environmentVariables": [
                          {
                            "name": "clientNames",
                            "value": "[join(parameters('clientNames'), ',')]"
                          },
                          {
                            "name": "ENDPOINT_TYPE",
                            "value": "[parameters('endpointType')]"
                          },
                          {
                            "name": "privateDnsZoneName",
                            "value": "[parameters('privateDnsZoneName')]"
                          }
                        ],
                        "timeout": "[format('PT{0}S', parameters('timeout'))]",
                        "retentionInterval": "PT6H",
                        "cleanupPreference": "Always"
                      },
                      "dependsOn": [
                        "privateIpExtractor"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateIpExtractor",
                        "count": "[length(parameters('clientNames'))]"
                      },
                      "condition": "[not(equals(parameters('endpointType'), 'app'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('extractIp-{0}-{1}-{2}', parameters('clientNames')[copyIndex()], parameters('endpointType'), uniqueString(resourceGroup().id, deployment().name))]",
                      "resourceGroup": "[format('rg-{0}', parameters('clientNames')[copyIndex()])]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateEndpointId": "[if(equals(parameters('endpointType'), 'stg'), createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientNames')[copyIndex()])), 'Microsoft.Network/privateEndpoints', format('pe-stg{0}{1}', parameters('discriminator'), parameters('clientNames')[copyIndex()]))), createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientNames')[copyIndex()])), 'Microsoft.Network/privateEndpoints', format('pe-{0}-{1}-{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientNames')[copyIndex()]))))]",
                          "timeout": {
                            "value": "[parameters('timeout')]"
                          },
                          "endpointType": {
                            "value": "[parameters('endpointType')]"
                          },
                          "clientName": {
                            "value": "[parameters('clientNames')[copyIndex()]]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "12147592847880662269"
                            }
                          },
                          "parameters": {
                            "privateEndpointId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the Private Endpoint to extract IP and FQDN information"
                              }
                            },
                            "timeout": {
                              "type": "int",
                              "defaultValue": 20,
                              "metadata": {
                                "description": "Timeout duration in minutes for the script execution"
                              }
                            },
                            "endpointType": {
                              "type": "string",
                              "defaultValue": "app",
                              "allowedValues": [
                                "app",
                                "pai",
                                "law",
                                "pkv",
                                "sql",
                                "stg"
                              ],
                              "metadata": {
                                "description": "Type of service for additional DNS configuration, specifying the resource type"
                              }
                            },
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Client name associated with the Private Endpoint or service"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            }
                          },
                          "variables": {
                            "endpointName": "[if(equals(parameters('endpointType'), 'stg'), toLower(format('ep-{0}{1}{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientName'))), format('ep-{0}-{1}-{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientName')))]"
                          },
                          "resources": [
                            {
                              "condition": "[not(equals(parameters('endpointType'), 'app'))]",
                              "type": "Microsoft.Resources/deploymentScripts",
                              "apiVersion": "2023-08-01",
                              "name": "[format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))]",
                              "kind": "AzureCLI",
                              "location": "[resourceGroup().location]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', resourceId('rg-central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                                }
                              },
                              "properties": {
                                "azCliVersion": "2.40.0",
                                "scriptContent": "      #!/bin/bash\n      set -e\n\n      echo \"Subscription ID: $SUBSCRIPTION_ID\"\n      echo \"Private Endpoint ID: $PRIVATE_ENDPOINT_ID\"\n      echo \"Service Type: $ENDPOINT_TYPE\"\n\n      # Quick subscription check\n      if [ -z \"$SUBSCRIPTION_ID\" ]; then\n        echo \"Error: Subscription ID is empty\"\n        exit 1\n      fi\n      az account set --subscription \"$SUBSCRIPTION_ID\" || {\n        echo \"Error: Failed to set subscription\"\n        exit 1\n      }\n\n      # Get Private IPs with timeout\n      PRIVATE_IPS=$(timeout 120s az network private-endpoint show \\\n        --ids \"$PRIVATE_ENDPOINT_ID\" \\\n        --query \"networkInterfaces[*].ipConfigurations[*].privateIPAddress\" \\\n        -o tsv 2>/dev/null | sort -u | tr '\\n' ',' | sed 's/,$//')\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"No IPs found, checking NICs (limited to first NIC)...\"\n        NIC_ID=$(timeout 60s az network private-endpoint show \\\n          --ids \"$PRIVATE_ENDPOINT_ID\" \\\n          --query \"networkInterfaces[0].id\" \\\n          -o tsv 2>/dev/null)\n        if [ -n \"$NIC_ID\" ]; then\n          PRIVATE_IPS=$(timeout 60s az network nic show \\\n            --ids \"$NIC_ID\" \\\n            --query \"ipConfigurations[?contains(name, 'privateEndpointIpConfig')].privateIpAddress\" \\\n            -o tsv 2>/dev/null | head -n 1)\n        fi\n      fi\n\n      # Validate IPs\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"Error: No valid private IPs found\"\n        exit 1\n      fi\n      VALID_IPS=\"\"\n      for IP in $(echo \"$PRIVATE_IPS\" | tr ',' '\\n'); do\n        if [[ \"$IP\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n          VALID_IPS=\"$VALID_IPS,$IP\"\n        fi\n      done\n      PRIVATE_IPS=$(echo \"$VALID_IPS\" | sed 's/^,//' | tr '\\n' ',' | sed 's/,$//')\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"Error: No valid IPs after validation\"\n        exit 1\n      fi\n\n      # Get Azure environment specific domain suffixes\n      SQL_DOMAIN=$(az cloud show --query 'suffixes.sqlServerHostname' -o tsv)\n      # Remove leading dot if present\n      SQL_DOMAIN=${SQL_DOMAIN#.}\n      STORAGE_DOMAIN=$(az cloud show --query 'suffixes.storage' -o tsv)\n      # Remove leading dot if present\n      STORAGE_DOMAIN=${STORAGE_DOMAIN#.}\n      KV_DOMAIN=$(az cloud show --query 'suffixes.keyVaultDns' -o tsv)\n      # Remove leading dot if present\n      KV_DOMAIN=${KV_DOMAIN#.}\n      MONITOR_DOMAIN=\"privatelink.monitor.azure.com\" # TODO: Get this from Azure CLI when available\n\n      # Generate FQDNs\n      case \"$ENDPOINT_TYPE\" in\n        \"pai\") PRIVATE_FQDNS=\"pai-${DISCRIMINATOR}-${CLIENT_NAME}.${MONITOR_DOMAIN}\" ;;\n        \"sql\") PRIVATE_FQDNS=\"sql-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.${SQL_DOMAIN}\" ;;\n        \"stg\") PRIVATE_FQDNS=\"stg${DISCRIMINATOR}${CLIENT_NAME}.privatelink.blob.${STORAGE_DOMAIN}\" ;;\n        \"pkv\") PRIVATE_FQDNS=\"pkv-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.${KV_DOMAIN}\" ;;\n        \"law\") PRIVATE_FQDNS=\"law-${DISCRIMINATOR}-${CLIENT_NAME}.${MONITOR_DOMAIN}\" ;;\n        \"app\") echo \"Skipping App Service\"; \\\n              echo \"{\\\"privateIps\\\": [], \\\"privateFqdns\\\": []}\" > $AZ_SCRIPTS_OUTPUT_PATH; \\\n              exit 0 ;;\n        *) echo \"Error: Unsupported type $ENDPOINT_TYPE\"; exit 1 ;;\n      esac\n      \n      # Remove trailing dots from FQDNs if present\n      PRIVATE_FQDNS=${PRIVATE_FQDNS%.}\n\n      if [ -z \"$PRIVATE_FQDNS\" ]; then\n        echo \"Error: No FQDNs generated\"\n        exit 1\n      fi\n\n      # Output results\n      echo \"Private IPs: $PRIVATE_IPS\"\n      echo \"Private FQDNs: $PRIVATE_FQDNS\"\n      echo \"{\\\"privateIps\\\": [\\\"${PRIVATE_IPS//,/\\\",\\\"}\\\"], \\\"privateFqdns\\\": [\\\"${PRIVATE_FQDNS//,/\\\",\\\"}\\\"]}\" \\\n        > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                                "environmentVariables": [
                                  {
                                    "name": "SUBSCRIPTION_ID",
                                    "value": "[subscription().subscriptionId]"
                                  },
                                  {
                                    "name": "PRIVATE_ENDPOINT_ID",
                                    "value": "[parameters('privateEndpointId')]"
                                  },
                                  {
                                    "name": "ENDPOINT_TYPE",
                                    "value": "[parameters('endpointType')]"
                                  },
                                  {
                                    "name": "CLIENT_NAME",
                                    "value": "[parameters('clientName')]"
                                  },
                                  {
                                    "name": "DISCRIMINATOR",
                                    "value": "[parameters('discriminator')]"
                                  },
                                  {
                                    "name": "REGION",
                                    "value": "[resourceGroup().location]"
                                  },
                                  {
                                    "name": "STORAGE_SUFFIX",
                                    "value": "[environment().suffixes.storage]"
                                  }
                                ],
                                "timeout": "[format('PT{0}M', parameters('timeout'))]",
                                "retentionInterval": "PT6H",
                                "cleanupPreference": "Always"
                              }
                            }
                          ],
                          "outputs": {
                            "privateIps": {
                              "type": "array",
                              "value": "[if(not(equals(parameters('endpointType'), 'app')), reference(resourceId('Microsoft.Resources/deploymentScripts', format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))), '2023-08-01').outputs.privateIps, createArray())]"
                            },
                            "privateFqdns": {
                              "type": "array",
                              "value": "[if(not(equals(parameters('endpointType'), 'app')), reference(resourceId('Microsoft.Resources/deploymentScripts', format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))), '2023-08-01').outputs.privateFqdns, createArray())]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('cleanedZones')[copyIndex()].zoneName)]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'centralResourcesDeployment')]",
        "clientResources"
      ]
    },
    {
      "copy": {
        "name": "peering",
        "count": "[length(parameters('clients'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('vnetPeering-{0}', parameters('clients')[copyIndex()].name)]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clientName": {
            "value": "[parameters('clients')[copyIndex()].name]"
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "8384731034014193023"
            }
          },
          "parameters": {
            "clientName": {
              "type": "string"
            },
            "discriminator": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "hubPeering",
              "resourceGroup": "rg-central",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "2958044444251234789"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string"
                    },
                    "discriminator": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "spokeVnetName": "[format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                    "spokeVnetRg": "[format('rg-{0}', parameters('clientName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', format('vnet-{0}-Central', parameters('discriminator')), format('{0}-to-{1}', format('vnet-{0}-Central', parameters('discriminator')), variables('spokeVnetName')))]",
                      "properties": {
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(variables('spokeVnetRg'), 'Microsoft.Network/virtualNetworks', variables('spokeVnetName'))]"
                        },
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": true,
                        "useRemoteGateways": false
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "spokePeering",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "2032057057955620510"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string"
                    },
                    "discriminator": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "hubVnetRg": "rg-central",
                    "hubVnetName": "[format('vnet-{0}-Central', parameters('discriminator'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), format('{0}-to-{1}', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), variables('hubVnetName')))]",
                      "properties": {
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(variables('hubVnetRg'), 'Microsoft.Network/virtualNetworks', variables('hubVnetName'))]"
                        },
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": false,
                        "useRemoteGateways": false
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'centralResourcesDeployment')]",
        "clientResources",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'privateDnsZone')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "frontDoorConfiguration",
      "resourceGroup": "rg-central",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clientNames": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('clients'))]",
                "input": "[parameters('clients')[copyIndex('value')].name]"
              }
            ]
          },
          "name": {
            "value": "globalFrontDoor"
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "6753740193263257025"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Azure Front Door instance for global traffic management"
              }
            },
            "clientNames": {
              "type": "array",
              "metadata": {
                "description": "List of client names to configure Front Door resources for"
              }
            },
            "discriminator": {
              "type": "string",
              "metadata": {
                "description": "Unique qualifier for resource naming to avoid conflicts"
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Subscription ID for resource references"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "[format('configure-frontend-{0}', parameters('name'))]",
              "location": "eastus",
              "kind": "AzureCLI",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('rg-central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.40.0",
                "scriptContent": "      #!/bin/bash\n      set -ex\n\n      RESOURCE_GROUP=\"$RESOURCE_GROUP\"\n      FRONTDOOR_NAME=\"$FRONTDOOR_NAME\"\n      DISCRIMINATOR=\"$DISCRIMINATOR\"\n      SUBSCRIPTION_ID=\"$SUBSCRIPTION_ID\"\n\n      IFS=',' read -r -a CLIENT_NAMES <<< \"$CLIENT_NAMES\"\n\n      az config set extension.use_dynamic_install=yes_without_prompt\n\n      # Create an array to store private link connection IDs\n      declare -a PRIVATE_LINK_IDS=()\n\n      for CLIENT in \"${CLIENT_NAMES[@]}\"; do\n        ORIGIN_GROUP=\"afd-og-${DISCRIMINATOR}-${CLIENT}\"\n        ORIGIN_NAME=\"afd-o-${DISCRIMINATOR}-${CLIENT}\"\n        ENDPOINT_NAME=\"afd-ep-${DISCRIMINATOR}-${CLIENT}\"\n        ROUTE_NAME=\"afd-rt-${DISCRIMINATOR}-${CLIENT}\"\n        ORIGIN_HOST=\"app-${DISCRIMINATOR}-${CLIENT}.privatelink.azurewebsites.net\"\n        CLIENT_RG=\"rg-${CLIENT}\"\n        APP_NAME=\"app-${DISCRIMINATOR}-${CLIENT}\"\n\n        # Create the origin group\n        echo \"Creating origin group: $ORIGIN_GROUP\"\n        az afd origin-group create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --origin-group-name \"$ORIGIN_GROUP\" \\\n          --probe-request-type GET \\\n          --probe-protocol Https \\\n          --probe-interval-in-seconds 30 \\\n          --sample-size 4 \\\n          --successful-samples-required 3 \\\n          --probe-path \"/\" \\\n          --additional-latency-in-milliseconds 50\n\n        # Create the origin with private link\n        echo \"Creating origin with private link: $ORIGIN_NAME\"\n        OUTPUT=$(az afd origin create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --origin-group-name \"$ORIGIN_GROUP\" \\\n          --origin-name \"$ORIGIN_NAME\" \\\n          --host-name \"$ORIGIN_HOST\" \\\n          --origin-host-header \"$ORIGIN_HOST\" \\\n          --http-port 80 \\\n          --https-port 443 \\\n          --priority 1 \\\n          --weight 1000 \\\n          --enabled-state Enabled \\\n          --enable-private-link true \\\n          --private-link-location \"eastus\" \\\n          --private-link-resource \"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CLIENT_RG}/providers/Microsoft.Web/sites/${APP_NAME}\" \\\n          --private-link-sub-resource-type \"sites\" \\\n          --private-link-request-message \"AFD App Service origin Private Link request.\" \\\n          --enforce-certificate-name-check true -o json)\n\n        # Extract private link connection ID\n        echo \"Extracting private link ID\"\n        PL_ID=$(echo \"$OUTPUT\" | jq -r '.privateLinkResource.id')\n        if [ -n \"$PL_ID\" ]; then\n          PRIVATE_LINK_IDS+=(\"$PL_ID\")\n          echo \"Added private link ID: $PL_ID\"\n        else\n          echo \"WARNING: Failed to extract private link ID for $CLIENT\"\n        fi\n\n        # Create the endpoint\n        echo \"Creating endpoint: $ENDPOINT_NAME\"\n        az afd endpoint create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --endpoint-name \"$ENDPOINT_NAME\" \\\n          --enabled-state Enabled\n\n        # Create the route\n        echo \"Creating route: $ROUTE_NAME\"\n        az afd route create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --endpoint-name \"$ENDPOINT_NAME\" \\\n          --route-name \"$ROUTE_NAME\" \\\n          --origin-group \"$ORIGIN_GROUP\" \\\n          --supported-protocols Https \\\n          --forwarding-protocol HttpsOnly \\\n          --link-to-default-domain Enabled \\\n          --https-redirect Disabled\n      done\n\n      # Return the private link IDs for the next script to use\n      echo \"Returning private link IDs\"\n      if [ ${#PRIVATE_LINK_IDS[@]} -eq 0 ]; then\n        echo \"{\\\"privateLinks\\\": []}\" > $AZ_SCRIPTS_OUTPUT_PATH\n      else\n        # Ensure proper JSON formatting with jq\n        JSON_OUTPUT=$(printf '\"%s\",' \"${PRIVATE_LINK_IDS[@]}\" | sed 's/,$//')\n        echo \"{\\\"privateLinks\\\": [$JSON_OUTPUT]}\" | jq '.' > $AZ_SCRIPTS_OUTPUT_PATH\n      fi\n    ",
                "environmentVariables": [
                  {
                    "name": "RESOURCE_GROUP",
                    "value": "[resourceGroup().name]"
                  },
                  {
                    "name": "FRONTDOOR_NAME",
                    "value": "[parameters('name')]"
                  },
                  {
                    "name": "DISCRIMINATOR",
                    "value": "[parameters('discriminator')]"
                  },
                  {
                    "name": "CLIENT_NAMES",
                    "value": "[join(parameters('clientNames'), ',')]"
                  },
                  {
                    "name": "SUBSCRIPTION_ID",
                    "value": "[parameters('subscriptionId')]"
                  }
                ],
                "retentionInterval": "PT1H",
                "timeout": "PT20M",
                "cleanupPreference": "OnSuccess"
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "approve-pl-connections",
              "location": "eastus",
              "kind": "AzureCLI",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('rg-central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.40.0",
                "scriptContent": "      #!/bin/bash\n      set -ex\n      \n      # Parse input parameters\n      DISCRIMINATOR=\"$DISCRIMINATOR\"\n      SUBSCRIPTION_ID=\"$SUBSCRIPTION_ID\" \n      IFS=',' read -r -a CLIENT_NAMES <<< \"$CLIENT_NAMES\"\n      \n      # Parse private link IDs from previous script\n      PRIVATE_LINKS_JSON=$PRIVATE_LINKS\n      PRIVATE_LINKS=$(echo \"$PRIVATE_LINKS_JSON\" | jq -r '.privateLinks[]' 2>/dev/null || echo \"\")\n      \n      # Function to wait for private endpoint connection to be created\n      wait_for_pe_connection() {\n        local app_id=$1\n        local max_attempts=30\n        local attempt=0\n        local found=false\n        \n        echo \"Waiting for private endpoint connection to be created for $app_id...\"\n        \n        while [ $attempt -lt $max_attempts ] && [ \"$found\" = false ]; do\n          connections=$(az network private-endpoint-connection list --id \"$app_id\" -o json 2>/dev/null || echo \"[]\")\n          connection_count=$(echo \"$connections\" | jq 'length')\n          \n          if [ \"$connection_count\" -gt 0 ]; then\n            found=true\n            echo \"Private endpoint connection found for $app_id\"\n          else\n            echo \"Attempt $((attempt+1))/$max_attempts: No private endpoint connections found yet, waiting...\"\n            sleep 10\n            ((attempt++))\n          fi\n        done\n        \n        if [ \"$found\" = false ]; then\n          echo \"Failed to find private endpoint connection after $max_attempts attempts\"\n          return 1\n        fi\n        \n        return 0\n      }\n      \n      # Process each client\n      for CLIENT in \"${CLIENT_NAMES[@]}\"; do\n        # App properties\n        CLIENT_RG=\"rg-${CLIENT}\"\n        APP_NAME=\"app-${DISCRIMINATOR}-${CLIENT}\"\n        APP_ID=\"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CLIENT_RG}/providers/Microsoft.Web/sites/${APP_NAME}\"\n        \n        echo \"Processing app: $APP_NAME in resource group: $CLIENT_RG\"\n        \n        # Wait for private endpoint connection to be created\n        if wait_for_pe_connection \"$APP_ID\"; then\n          # Approve all pending connections for the app\n          echo \"Approving private endpoint connections for $APP_NAME...\"\n          \n          # Safely retrieve private endpoint connections\n          connections=$(az network private-endpoint-connection list --id \"$APP_ID\" -o json 2>/dev/null || echo \"[]\")\n          # Safely process connections one by one\n          echo \"$connections\" | jq -c '.[]' | while read -r connection; do\n            connection_id=$(echo \"$connection\" | jq -r '.id')\n            status=$(echo \"$connection\" | jq -r '.properties.privateLinkServiceConnectionState.status // \"Unknown\"')\n            \n            if [ \"$status\" != \"Approved\" ]; then\n              echo \"Approving connection: $connection_id\"\n              az network private-endpoint-connection approve \\\n                --id \"$connection_id\" \\\n                --description \"Approved by deployment script\" || echo \"Failed to approve connection: $connection_id\"\n            else\n              echo \"Connection already approved: $connection_id\"\n            fi\n          done\n          \n          # Wait for approval to take effect (10 seconds)\n          echo \"Waiting for approval to take effect...\"\n          sleep 10\n          \n          # Disable public network access for the app\n          echo \"Disabling public network access for $APP_NAME...\"\n          az webapp update \\\n            --resource-group \"$CLIENT_RG\" \\\n            --name \"$APP_NAME\" \\\n            --set publicNetworkAccess=Disabled || echo \"Failed to disable public network access for $APP_NAME\"\n        else\n          echo \"Skipping approval for $APP_NAME due to timeout waiting for private endpoint connection\"\n        fi\n      done\n      \n      echo \"Private link approval and public network access configuration completed\"\n      echo \"{\\\"status\\\": \\\"completed\\\"}\" > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                "environmentVariables": [
                  {
                    "name": "DISCRIMINATOR",
                    "value": "[parameters('discriminator')]"
                  },
                  {
                    "name": "CLIENT_NAMES",
                    "value": "[join(parameters('clientNames'), ',')]"
                  },
                  {
                    "name": "SUBSCRIPTION_ID",
                    "value": "[parameters('subscriptionId')]"
                  },
                  {
                    "name": "PRIVATE_LINKS",
                    "value": "[string(reference(resourceId('Microsoft.Resources/deploymentScripts', format('configure-frontend-{0}', parameters('name'))), '2023-08-01').outputs)]"
                  }
                ],
                "retentionInterval": "PT1H",
                "timeout": "PT20M",
                "cleanupPreference": "OnSuccess"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', format('configure-frontend-{0}', parameters('name')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "peering"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deployment-scripts-identity",
      "resourceGroup": "rg-central",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "uami-deployment-scripts"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "2694307901126858253"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the User Assigned Managed Identity"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region where the identity will be deployed"
              }
            }
          },
          "variables": {
            "roleId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "roleDefinitionId": {
              "type": "string",
              "value": "[variables('roleId')]"
            },
            "uamiId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the UAMI"
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the UAMI"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', 'centralResourceGroup')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "central-key-vault-deployment",
      "resourceGroup": "rg-central",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "central"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          },
          "accessPolicies": {
            "value": [
              {
                "objectId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'deployment-scripts-identity'), '2022-09-01').outputs.principalId.value]",
                "tenantId": "[subscription().tenantId]",
                "permissions": {
                  "certificates": [
                    "get",
                    "list",
                    "create",
                    "import",
                    "delete",
                    "purge",
                    "recover",
                    "backup",
                    "restore"
                  ],
                  "secrets": [
                    "get",
                    "list",
                    "set",
                    "delete",
                    "purge",
                    "recover",
                    "backup",
                    "restore"
                  ],
                  "keys": [
                    "get",
                    "list",
                    "create",
                    "delete",
                    "purge",
                    "recover",
                    "backup",
                    "restore"
                  ]
                }
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "6782796047405560385"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "central",
              "metadata": {
                "description": "Name for the Key Vault"
              }
            },
            "discriminator": {
              "type": "string",
              "metadata": {
                "description": "Unique qualifier for resource naming to avoid conflicts"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region for the Key Vault"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "SKU of the Key Vault, defaults to standard"
              }
            },
            "accessPolicies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Access policies defining permissions for administrators or applications"
              }
            },
            "softDeleteRetentionDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "Soft delete retention period in days, minimum 7 days for recovery"
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Flag to enable purge protection for enhanced security"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags for organizing and billing the Key Vault instance"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[format('kv-{0}-{1}', parameters('discriminator'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "[parameters('skuName')]"
                },
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": "[parameters('accessPolicies')]",
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionDays')]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "publicNetworkAccess": "Enabled"
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed Key Vault instance"
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', format('kv-{0}-{1}', parameters('discriminator'), parameters('name')))]"
            },
            "vaultUri": {
              "type": "string",
              "metadata": {
                "description": "The URI of the Key Vault for accessing secrets, keys, and certificates"
              },
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', format('kv-{0}-{1}', parameters('discriminator'), parameters('name'))), '2022-07-01').vaultUri]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Key Vault instance for reference"
              },
              "value": "[format('kv-{0}-{1}', parameters('discriminator'), parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', 'centralResourceGroup')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'deployment-scripts-identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "kv-role-assignment",
      "resourceGroup": "rg-central",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'deployment-scripts-identity'), '2022-09-01').outputs.principalId.value]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'central-key-vault-deployment'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "15939867994849881512"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "The Principal ID to assign the Key Vault Administrator role to"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The Key Vault name"
              }
            }
          },
          "variables": {
            "kvRoleName": "[guid(resourceGroup().id, parameters('principalId'), 'Key Vault Administrator')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[variables('kvRoleName')]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Role Assignment resource ID"
              },
              "value": "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), 'Microsoft.Authorization/roleAssignments', variables('kvRoleName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'central-key-vault-deployment')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'deployment-scripts-identity')]"
      ]
    },
    {
      "condition": "[parameters('deployVpn')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "vpnGatewayDeployment",
      "resourceGroup": "rg-central",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "discriminator": {
            "value": "[parameters('discriminator')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "addressPool": {
            "value": "172.16.0.0/24"
          },
          "authType": {
            "value": "Certificate"
          },
          "rootCertData": {
            "value": "[parameters('vpnRootCertData')]"
          },
          "rootCertName": {
            "value": "[parameters('vpnRootCertName')]"
          },
          "uamiId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'deployment-scripts-identity'), '2022-09-01').outputs.uamiId.value]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'central-key-vault-deployment'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "17034311284441229716"
            }
          },
          "parameters": {
            "discriminator": {
              "type": "string",
              "metadata": {
                "description": "Unique qualifier for resource naming to avoid conflicts"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region where resources will be deployed"
              }
            },
            "addressPool": {
              "type": "string",
              "metadata": {
                "description": "Address pool for VPN clients, e.g. 172.16.0.0/24"
              }
            },
            "authType": {
              "type": "string",
              "defaultValue": "Certificate",
              "allowedValues": [
                "Certificate",
                "AAD"
              ],
              "metadata": {
                "description": "Authentication type for VPN clients"
              }
            },
            "rootCertName": {
              "type": "string",
              "defaultValue": "P2SRootCert",
              "metadata": {
                "description": "Root certificate name for VPN authentication"
              }
            },
            "aadTenantId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure AD tenant ID for AAD authentication"
              }
            },
            "aadAudience": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure AD audience for AAD authentication"
              }
            },
            "aadIssuer": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure AD issuer for AAD authentication"
              }
            },
            "rootCertData": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Root certificate data for VPN authentication (base64-encoded .cer). If not provided, a certificate will be generated automatically."
              }
            },
            "uamiId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the User Assigned Managed Identity to use for deployment scripts"
              }
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "[format('kv-vpn-{0}', parameters('discriminator'))]",
              "metadata": {
                "description": "Name of the Key Vault where VPN certificates will be stored"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', format('vnet-{0}-central', parameters('discriminator')), 'GatewaySubnet')]",
              "properties": {
                "addressPrefix": "10.0.3.0/26"
              }
            },
            {
              "condition": "[and(equals(parameters('rootCertData'), ''), not(equals(parameters('uamiId'), '')))]",
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "vpn-cert-generator",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('uamiId'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.40.0",
                "retentionInterval": "P1D",
                "scriptContent": "      #!/bin/bash\n      set -e\n\n      KEY_VAULT_NAME=$1\n      CERT_NAME=$2\n      CLIENT_CERT_NAME=\"P2SClientCert\"\n      PASSWORD=\"Password1!\"\n      \n      echo \"Starting VPN certificate generation script\"\n      echo \"Key Vault: $KEY_VAULT_NAME\"\n      echo \"Certificate Name: $CERT_NAME\"\n      \n      # Add access policy for the managed identity\n      echo \"Setting access policy for deployment script identity...\"\n      OBJ_ID=$(az account show --query id -o tsv)\n      echo \"Current identity object ID: $OBJ_ID\"\n      \n      # First check if we can access the Key Vault\n      if ! az keyvault show --name \"$KEY_VAULT_NAME\" &>/dev/null; then\n        echo \"Error: Cannot access Key Vault $KEY_VAULT_NAME\"\n        exit 1\n      fi\n      \n      # Get key vault resource ID for role assignment\n      KV_ID=$(az keyvault show --name \"$KEY_VAULT_NAME\" --query id -o tsv)\n      echo \"Key Vault ID: $KV_ID\"\n      \n      # Assign Key Vault Administrator role to managed identity\n      echo \"Assigning Key Vault Administrator role...\"\n      az role assignment create \\\n        --assignee \"$OBJ_ID\" \\\n        --role \"Key Vault Administrator\" \\\n        --scope \"$KV_ID\" || echo \"Role assignment failed, trying access policy\"\n        \n      # Using set-policy for access permissions to ensure we have them\n      echo \"Setting access policy directly...\"\n      az keyvault set-policy --name \"$KEY_VAULT_NAME\" \\\n        --object-id \"$OBJ_ID\" \\\n        --certificate-permissions get list create import delete purge recover backup restore \\\n        --secret-permissions get list set delete purge recover backup restore \\\n        --key-permissions get list create delete purge recover backup restore\n      \n      # Wait a bit to ensure policy propagation\n      echo \"Waiting for access policy to propagate...\"\n      sleep 15\n      \n      # Check if we can actually access the key vault\n      echo \"Testing key vault access...\"\n      if ! az keyvault secret list --vault-name \"$KEY_VAULT_NAME\" &>/dev/null; then\n        echo \"WARNING: Still can't list secrets. Trying to force permissions...\"\n        # Try another policy setting - sometimes this works better\n        az keyvault update --name \"$KEY_VAULT_NAME\" --enable-rbac-authorization false\n        sleep 5\n        az keyvault set-policy --name \"$KEY_VAULT_NAME\" \\\n          --object-id \"$OBJ_ID\" \\\n          --certificate-permissions all \\\n          --secret-permissions all \\\n          --key-permissions all\n        sleep 15\n      fi\n        \n      # Create temporary directory\n      echo \"Creating temporary directory...\"\n      CERT_DIR=$(mktemp -d)\n      cd \"$CERT_DIR\"\n      \n      # Generate root certificate\n      echo \"Generating root certificate...\"\n      openssl req -x509 -new -nodes -sha256 -days 3650 \\\n        -subj \"/CN=$CERT_NAME\" \\\n        -keyout \"$CERT_NAME.key\" \\\n        -out \"$CERT_NAME.crt\"\n      \n      # Convert root cert to DER for Azure VPN\n      echo \"Converting to DER format...\"\n      openssl x509 -in \"$CERT_NAME.crt\" -outform der -out \"$CERT_NAME.cer\"\n      \n      # Base64 encode for Azure\n      echo \"Base64 encoding certificate...\"\n      ROOT_CERT_DATA=$(base64 -i \"$CERT_NAME.cer\" | tr -d '\\n')\n      \n      # Generate client key for VPN connections\n      echo \"Generating client certificate...\"\n      openssl genrsa -out \"$CLIENT_CERT_NAME.key\" 2048\n      \n      # Generate client certificate request\n      echo \"Creating CSR...\"\n      openssl req -new -key \"$CLIENT_CERT_NAME.key\" -out \"$CLIENT_CERT_NAME.csr\" -subj \"/CN=$CLIENT_CERT_NAME\"\n      \n      # Sign client certificate with root certificate\n      echo \"Signing client certificate...\"\n      openssl x509 -req -in \"$CLIENT_CERT_NAME.csr\" \\\n        -CA \"$CERT_NAME.crt\" \\\n        -CAkey \"$CERT_NAME.key\" \\\n        -CAcreateserial \\\n        -out \"$CLIENT_CERT_NAME.crt\" \\\n        -days 365 -sha256\n      \n      # Create PKCS#12 file for client import\n      echo \"Creating PKCS#12 bundle...\"\n      openssl pkcs12 -export \\\n        -in \"$CLIENT_CERT_NAME.crt\" \\\n        -inkey \"$CLIENT_CERT_NAME.key\" \\\n        -certfile \"$CERT_NAME.crt\" \\\n        -out \"$CLIENT_CERT_NAME.pfx\" \\\n        -password pass:$PASSWORD\n      \n      # Store certificates in Key Vault\n      echo \"Storing certificates in Key Vault...\"\n      \n      # Check if certificates already exist\n      ROOT_CERT_EXISTS=false\n      CLIENT_CERT_EXISTS=false\n      CLIENT_SECRET_EXISTS=false\n      \n      if az keyvault certificate show --vault-name \"$KEY_VAULT_NAME\" --name \"$CERT_NAME\" &>/dev/null; then\n        echo \"Root certificate already exists in Key Vault\"\n        ROOT_CERT_EXISTS=true\n      fi\n      \n      if az keyvault certificate show --vault-name \"$KEY_VAULT_NAME\" --name \"$CLIENT_CERT_NAME\" &>/dev/null; then\n        echo \"Client certificate already exists in Key Vault\"\n        CLIENT_CERT_EXISTS=true\n      fi\n      \n      if az keyvault secret show --vault-name \"$KEY_VAULT_NAME\" --name \"$CLIENT_CERT_NAME-pfx\" &>/dev/null; then\n        echo \"Client certificate PFX already exists in Key Vault\"\n        CLIENT_SECRET_EXISTS=true\n      fi\n      \n      # If both client certificate and pfx secret exist, we can skip import\n      if $ROOT_CERT_EXISTS && $CLIENT_CERT_EXISTS && $CLIENT_SECRET_EXISTS; then\n        echo \"All certificates and secrets already exist in Key Vault. Using existing ones.\"\n      else\n        echo \"Some certificate assets need to be imported to Key Vault.\"\n        echo \"Importing root certificate...\"\n        # Create PFX for Key Vault root cert\n        openssl pkcs12 -export -out \"$CERT_NAME.pfx\" -inkey \"$CERT_NAME.key\" -in \"$CERT_NAME.crt\" -passout pass:$PASSWORD\n        \n        # Import root certificate to Key Vault - with a retry mechanism\n        echo \"Importing root certificate...\"\n        for i in {1..3}; do\n          if az keyvault certificate import --vault-name \"$KEY_VAULT_NAME\" \\\n            --name \"$CERT_NAME\" \\\n            --file \"$CERT_NAME.pfx\" \\\n            --password \"$PASSWORD\"; then\n            echo \"Root certificate imported successfully\"\n            break\n          else\n            echo \"Retry $i: Failed to import root certificate\"\n            # Wait a few seconds before retrying\n            sleep 5\n            # Get permissions again just to be sure\n            az keyvault set-policy --name \"$KEY_VAULT_NAME\" \\\n              --object-id \"$OBJ_ID\" \\\n              --certificate-permissions get list create import delete purge recover backup restore \\\n              --secret-permissions get list set delete purge recover backup restore \\\n              --key-permissions get list create delete purge recover backup restore\n          fi\n          \n          if [ $i -eq 3 ]; then\n            echo \"Warning: Could not import root certificate after $i attempts\"\n          fi\n        done\n        \n        # Verify current key vault permissions\n        echo \"Verifying current permissions...\"\n        # Current permission status\n        echo \"Testing access to secrets in Key Vault...\"\n        SECRET_ACCESS=$(az keyvault secret list --vault-name \"$KEY_VAULT_NAME\" &>/dev/null && echo \"true\" || echo \"false\")\n        echo \"Secret access: $SECRET_ACCESS\"\n\n        # Store the certificates using a different approach\n        # Save to local files first so we can try multiple approaches\n        echo \"Preparing files for key vault storage...\"\n        \n        # Save the root certificate public data to a file\n        echo \"$ROOT_CERT_DATA\" > rootcert_public.txt\n        \n        # Save client pfx base64 data to a file\n        CLIENT_PFX_B64=$(base64 -i \"$CLIENT_CERT_NAME.pfx\" | tr -d '\\n')\n        echo \"$CLIENT_PFX_B64\" > client_pfx.txt\n        \n        # Save password to a file\n        echo \"$PASSWORD\" > client_password.txt\n        \n        # Try direct Azure CLI approach first\n        echo \"Attempting to store secrets using az CLI...\"\n        \n        # Simplified for clarity - try with basic parameters first\n        echo \"Storing root certificate public data...\"\n        az keyvault secret set --vault-name \"$KEY_VAULT_NAME\" \\\n          --name \"$CERT_NAME-public\" \\\n          --value \"$ROOT_CERT_DATA\" \\\n          --output none || echo \"Failed to store root certificate public data (direct)\"\n        \n        echo \"Importing client certificate...\"\n        az keyvault certificate import --vault-name \"$KEY_VAULT_NAME\" \\\n          --name \"$CLIENT_CERT_NAME\" \\\n          --file \"$CLIENT_CERT_NAME.pfx\" \\\n          --password \"$PASSWORD\" \\\n          --output none || echo \"Failed to import client certificate (direct)\"\n        \n        echo \"Storing client PFX as secret...\"\n        az keyvault secret set --vault-name \"$KEY_VAULT_NAME\" \\\n          --name \"$CLIENT_CERT_NAME-pfx\" \\\n          --value \"$CLIENT_PFX_B64\" \\\n          --output none || echo \"Failed to store client certificate PFX (direct)\"\n        \n        echo \"Storing client certificate password...\"\n        az keyvault secret set --vault-name \"$KEY_VAULT_NAME\" \\\n          --name \"$CLIENT_CERT_NAME-password\" \\\n          --value \"$PASSWORD\" \\\n          --output none || echo \"Failed to store client certificate password (direct)\"\n        \n        # Fallback approach - try with REST API through Azure CLI\n        echo \"Checking what we were able to store...\"\n        az keyvault secret list --vault-name \"$KEY_VAULT_NAME\" --query \"[].name\" -o tsv || echo \"Cannot list secrets\"\n        az keyvault certificate list --vault-name \"$KEY_VAULT_NAME\" --query \"[].name\" -o tsv || echo \"Cannot list certificates\"\n        \n        # Print conclusion\n        echo \"Certificate and secret storage operation completed\"\n        echo \"Note: If secrets were not stored, you'll need to manually add them from the generated files\"\n        echo \"Root certificate has been successfully imported and is accessible by the VPN Gateway\"\n      fi\n      \n      # List created objects in Key Vault\n      echo \"Listing certificates in Key Vault:\"\n      az keyvault certificate list --vault-name \"$KEY_VAULT_NAME\" --query \"[].id\" -o tsv || echo \"Failed to list certificates\"\n      \n      echo \"Listing secrets in Key Vault:\"\n      az keyvault secret list --vault-name \"$KEY_VAULT_NAME\" --query \"[].id\" -o tsv || echo \"Failed to list secrets\"\n      \n      # Save certificate data to a log file for debugging\n      echo \"Root cert data length: ${#ROOT_CERT_DATA}\" \n      echo \"Client PFX data length: ${#CLIENT_PFX_B64}\"\n      \n      # Make sure to output both certificates regardless of whether they were newly created or already existed\n      if [ -z \"$CLIENT_PFX_B64\" ] || [ \"$CLIENT_PFX_B64\" == \"null\" ]; then\n        echo \"Client PFX data is empty, trying to retrieve from Key Vault...\"\n        # Try to retrieve existing client certificate from Key Vault\n        RETRIEVED_CLIENT_PFX=\"\"\n        if az keyvault secret show --vault-name \"$KEY_VAULT_NAME\" --name \"$CLIENT_CERT_NAME-pfx\" --query \"value\" -o tsv &>/dev/null; then\n          RETRIEVED_CLIENT_PFX=$(az keyvault secret show --vault-name \"$KEY_VAULT_NAME\" --name \"$CLIENT_CERT_NAME-pfx\" --query \"value\" -o tsv)\n          echo \"Retrieved client certificate from Key Vault\"\n        fi\n        \n        # Use the retrieved value if it exists, otherwise use the generated value\n        if [ -n \"$RETRIEVED_CLIENT_PFX\" ]; then\n          CLIENT_PFX_B64=\"$RETRIEVED_CLIENT_PFX\"\n        fi\n      fi\n      \n      # Final verification and output\n      echo \"Final Root cert data length: ${#ROOT_CERT_DATA}\" \n      echo \"Final Client PFX data length: ${#CLIENT_PFX_B64}\"\n      \n      # Output the certificate data as script output\n      echo \"{ \\\"certificateData\\\": \\\"$ROOT_CERT_DATA\\\", \\\"clientCertificatePfx\\\": \\\"$CLIENT_PFX_B64\\\", \\\"clientCertificatePassword\\\": \\\"$PASSWORD\\\" }\" > $AZ_SCRIPTS_OUTPUT_PATH\n      \n      echo \"Certificate generation completed successfully\"\n      \n      # Clean up\n      cd - >/dev/null\n      rm -rf \"$CERT_DIR\"\n    ",
                "arguments": "[format('{0} {1}', parameters('keyVaultName'), parameters('rootCertName'))]",
                "timeout": "PT15M",
                "cleanupPreference": "Always"
              }
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2023-05-01",
              "name": "[format('vpngw-pip-{0}', parameters('discriminator'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                  "domainNameLabel": "[format('vpn-{0}', toLower(parameters('discriminator')))]"
                }
              }
            },
            {
              "type": "Microsoft.Network/vpnServerConfigurations",
              "apiVersion": "2023-05-01",
              "name": "[format('vpnconfig-{0}', parameters('discriminator'))]",
              "location": "[parameters('location')]",
              "properties": {
                "vpnProtocols": [
                  "IkeV2",
                  "OpenVPN"
                ],
                "vpnAuthenticationTypes": [
                  "[parameters('authType')]"
                ],
                "vpnClientRootCertificates": "[if(equals(parameters('authType'), 'Certificate'), createArray(createObject('name', parameters('rootCertName'), 'publicCertData', if(not(empty(parameters('rootCertData'))), parameters('rootCertData'), if(not(equals(parameters('uamiId'), '')), reference(resourceId('Microsoft.Resources/deploymentScripts', 'vpn-cert-generator'), '2020-10-01').outputs.certificateData, '')))), createArray())]",
                "aadAuthenticationParameters": "[if(equals(parameters('authType'), 'AAD'), createObject('aadTenant', parameters('aadTenantId'), 'aadAudience', parameters('aadAudience'), 'aadIssuer', parameters('aadIssuer')), null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', 'vpn-cert-generator')]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworkGateways",
              "apiVersion": "2023-05-01",
              "name": "[format('vpngw-{0}', parameters('discriminator'))]",
              "location": "[parameters('location')]",
              "properties": {
                "gatewayType": "Vpn",
                "vpnType": "RouteBased",
                "vpnGatewayGeneration": "Generation2",
                "sku": {
                  "name": "VpnGw2",
                  "tier": "VpnGw2"
                },
                "enableBgp": false,
                "activeActive": false,
                "ipConfigurations": [
                  {
                    "name": "default",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('vnet-{0}-central', parameters('discriminator')), 'GatewaySubnet')]"
                      },
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('vpngw-pip-{0}', parameters('discriminator')))]"
                      }
                    }
                  }
                ],
                "vpnClientConfiguration": {
                  "vpnClientAddressPool": {
                    "addressPrefixes": [
                      "[parameters('addressPool')]"
                    ]
                  },
                  "vpnClientProtocols": [
                    "IkeV2",
                    "OpenVPN"
                  ],
                  "vpnAuthenticationTypes": [
                    "[parameters('authType')]"
                  ],
                  "vpnClientRootCertificates": "[if(equals(parameters('authType'), 'Certificate'), createArray(createObject('name', parameters('rootCertName'), 'properties', createObject('publicCertData', if(not(empty(parameters('rootCertData'))), parameters('rootCertData'), if(not(equals(parameters('uamiId'), '')), reference(resourceId('Microsoft.Resources/deploymentScripts', 'vpn-cert-generator'), '2020-10-01').outputs.certificateData, ''))))), createArray())]",
                  "aadTenant": "[if(equals(parameters('authType'), 'AAD'), parameters('aadTenantId'), null())]",
                  "aadAudience": "[if(equals(parameters('authType'), 'AAD'), parameters('aadAudience'), null())]",
                  "aadIssuer": "[if(equals(parameters('authType'), 'AAD'), parameters('aadIssuer'), null())]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('vnet-{0}-central', parameters('discriminator')), 'GatewaySubnet')]",
                "[resourceId('Microsoft.Network/publicIPAddresses', format('vpngw-pip-{0}', parameters('discriminator')))]",
                "[resourceId('Microsoft.Resources/deploymentScripts', 'vpn-cert-generator')]"
              ]
            }
          ],
          "outputs": {
            "vpnGatewayId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the VPN gateway"
              },
              "value": "[resourceId('Microsoft.Network/virtualNetworkGateways', format('vpngw-{0}', parameters('discriminator')))]"
            },
            "vpnPublicIpAddress": {
              "type": "string",
              "metadata": {
                "description": "The public IP address of the VPN gateway"
              },
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', format('vpngw-pip-{0}', parameters('discriminator'))), '2023-05-01').ipAddress]"
            },
            "vpnClientPackageUrl": {
              "type": "string",
              "metadata": {
                "description": "The VPN client configuration package URL"
              },
              "value": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/virtualNetworkGateways/{2}/vpnclientpackage', subscription().subscriptionId, resourceGroup().name, format('vpngw-{0}', parameters('discriminator')))]"
            },
            "certificateData": {
              "type": "string",
              "metadata": {
                "description": "The certificate data used for VPN authentication"
              },
              "value": "[if(not(empty(parameters('rootCertData'))), parameters('rootCertData'), if(not(equals(parameters('uamiId'), '')), reference(resourceId('Microsoft.Resources/deploymentScripts', 'vpn-cert-generator'), '2020-10-01').outputs.certificateData, ''))]"
            },
            "clientCertificatePfx": {
              "type": "string",
              "metadata": {
                "description": "The client certificate PFX data if available from the deployment script"
              },
              "value": "[if(and(not(equals(parameters('uamiId'), '')), equals(parameters('rootCertData'), '')), if(contains(reference(resourceId('Microsoft.Resources/deploymentScripts', 'vpn-cert-generator'), '2020-10-01').outputs, 'clientCertificatePfx'), reference(resourceId('Microsoft.Resources/deploymentScripts', 'vpn-cert-generator'), '2020-10-01').outputs.clientCertificatePfx, ''), '')]"
            },
            "clientCertificatePassword": {
              "type": "string",
              "metadata": {
                "description": "The client certificate password if available from the deployment script"
              },
              "value": "[if(and(not(equals(parameters('uamiId'), '')), equals(parameters('rootCertData'), '')), if(contains(reference(resourceId('Microsoft.Resources/deploymentScripts', 'vpn-cert-generator'), '2020-10-01').outputs, 'clientCertificatePassword'), reference(resourceId('Microsoft.Resources/deploymentScripts', 'vpn-cert-generator'), '2020-10-01').outputs.clientCertificatePassword, ''), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'central-key-vault-deployment')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'centralResourcesDeployment')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'deployment-scripts-identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'frontDoorConfiguration')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'kv-role-assignment')]"
      ]
    }
  ],
  "outputs": {
    "vpnCertificateInfo": {
      "type": "object",
      "metadata": {
        "description": "VPN certificate information for client connection"
      },
      "value": "[if(parameters('deployVpn'), createObject('vpnClientPackageUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'vpnGatewayDeployment'), '2022-09-01').outputs.vpnClientPackageUrl.value, 'clientCertificatePfx', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'vpnGatewayDeployment'), '2022-09-01').outputs.clientCertificatePfx.value, 'clientCertificatePassword', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'vpnGatewayDeployment'), '2022-09-01').outputs.clientCertificatePassword.value), createObject())]"
    }
  }
}