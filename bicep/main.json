{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "14147080066293993600"
    }
  },
  "parameters": {
    "clients": {
      "type": "array",
      "metadata": {
        "description": "List of client configurations for deployment"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Location for all resources, defaults to East US"
      }
    },
    "discriminator": {
      "type": "string",
      "defaultValue": "lexsb",
      "metadata": {
        "description": "Unique qualifier for resource naming to avoid conflicts"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "centralResourceGroup",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "rg-central"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "15707163151755465878"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Resource Group"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location where the Resource Group will be created"
              }
            }
          },
          "resources": [
            {
              "condition": "[not(equals(subscription().id, ''))]",
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Resource Group"
              },
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            }
          }
        }
      }
    },
    {
      "copy": {
        "name": "clientResourceGroups",
        "count": "[length(parameters('clients'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rg-{0}', parameters('clients')[copyIndex()].name)]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('rg-{0}', parameters('clients')[copyIndex()].name)]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "15707163151755465878"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Resource Group"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location where the Resource Group will be created"
              }
            }
          },
          "resources": [
            {
              "condition": "[not(equals(subscription().id, ''))]",
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Resource Group"
              },
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "centralResourcesDeployment",
      "resourceGroup": "rg-central",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          },
          "clientNames": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('clients'))]",
                "input": "[parameters('clients')[copyIndex('value')].name]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "848174285276006244"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Geographic location for all central resources"
              }
            },
            "firewallName": {
              "type": "string",
              "defaultValue": "globalFirewall",
              "metadata": {
                "description": "Name of the global Azure Firewall resource"
              }
            },
            "frontDoorName": {
              "type": "string",
              "defaultValue": "globalFrontDoor",
              "metadata": {
                "description": "Name of the global Azure Front Door resource"
              }
            },
            "sentinelWorkspaceName": {
              "type": "string",
              "defaultValue": "globalSentinelWorkspace",
              "metadata": {
                "description": "Name of the global Sentinel (Log Analytics) workspace"
              }
            },
            "centralVNetCidr": {
              "type": "string",
              "defaultValue": "10.0.0.0/16",
              "metadata": {
                "description": "CIDR block for the central VNet"
              }
            },
            "discriminator": {
              "type": "string",
              "metadata": {
                "description": "Unique qualifier for resource naming to avoid conflicts"
              }
            },
            "clientNames": {
              "type": "array",
              "metadata": {
                "description": "List of client names for linking to central resources"
              }
            },
            "subnets": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "AzureFirewallSubnet",
                  "addressPrefix": "10.0.1.0/24"
                },
                {
                  "name": "OtherServices",
                  "addressPrefix": "10.0.2.0/24"
                },
                {
                  "name": "GatewaySubnet",
                  "addressPrefix": "10.0.3.0/26"
                }
              ],
              "metadata": {
                "description": "Subnet configuration for the central VNet"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2023-02-01",
              "name": "RouteTable",
              "location": "[parameters('location')]",
              "properties": {
                "routes": [
                  {
                    "name": "RouteToFirewall",
                    "properties": {
                      "addressPrefix": "0.0.0.0/0",
                      "nextHopType": "VirtualAppliance",
                      "nextHopIpAddress": "[reference(resourceId('Microsoft.Resources/deployments', 'firewall'), '2022-09-01').outputs.privateIp.value]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'firewall')]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-02-01",
              "name": "[format('{0}/{1}', format('vnet-{0}-Central', parameters('discriminator')), 'OtherServices')]",
              "properties": {
                "addressPrefix": "10.0.2.0/24",
                "routeTable": {
                  "id": "[resourceId('Microsoft.Network/routeTables', 'RouteTable')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'centralVNet')]",
                "[resourceId('Microsoft.Network/routeTables', 'RouteTable')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "centralVNet",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "Central"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "addressPrefixes": {
                    "value": [
                      "[parameters('centralVNetCidr')]"
                    ]
                  },
                  "subnets": {
                    "value": "[parameters('subnets')]"
                  },
                  "topology": {
                    "value": "hub"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "16722299546444263991"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Creates a virtual network with the specified naming"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Geographic location for all resources"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Address prefixes for the virtual network"
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Subnet configuration for the virtual network"
                      }
                    },
                    "topology": {
                      "type": "string",
                      "allowedValues": [
                        "hub",
                        "spoke"
                      ],
                      "metadata": {
                        "description": "Spoke or hub designation for VNet creation"
                      }
                    }
                  },
                  "variables": {
                    "vnetName": "[format('vnet-{0}-{1}', parameters('discriminator'), parameters('name'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2023-02-01",
                      "name": "[variables('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "privateEndpointNetworkPolicies": "[if(equals(parameters('topology'), 'spoke'), 'Disabled', null())]",
                                "privateLinkServiceNetworkPolicies": "[if(equals(parameters('topology'), 'spoke'), 'Disabled', null())]",
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "networkSecurityGroup": "[if(equals(parameters('topology'), 'spoke'), createObject('id', reference(resourceId('Microsoft.Resources/deployments', format('nsg-{0}-{1}', parameters('discriminator'), parameters('name'))), '2022-09-01').outputs.nsgIds.value[copyIndex('subnets')]), null())]",
                                "delegations": "[if(and(equals(parameters('topology'), 'spoke'), equals(parameters('subnets')[copyIndex('subnets')].name, 'FrontEnd')), createArray(createObject('name', 'MicrosoftWebServerFarms', 'properties', createObject('serviceName', 'Microsoft.Web/serverFarms'))), null())]"
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('nsg-{0}-{1}', parameters('discriminator'), parameters('name')))]"
                      ]
                    },
                    {
                      "condition": "[equals(parameters('topology'), 'spoke')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('nsg-{0}-{1}', parameters('discriminator'), parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "clientName": {
                            "value": "[parameters('name')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "frontDoorPrivateIp": {
                            "value": "10.0.0.0/16"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "13792003035119420994"
                            }
                          },
                          "parameters": {
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the client for the network security groups"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Geographic location for the network security groups"
                              }
                            },
                            "frontDoorPrivateIp": {
                              "type": "string",
                              "metadata": {
                                "description": "CIDR block for the Azure Front Door private IP range for secure access"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-backend', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-VNet-Traffic",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "VirtualNetwork",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "VirtualNetwork",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic within the virtual network for secure communication"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-frontend', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-FrontDoor-Private-IP",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "[parameters('frontDoorPrivateIp')]",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic from Azure Front Door private IP for secure access"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-privatelink', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-FrontDoor-Private-IP",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "[parameters('frontDoorPrivateIp')]",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic from Azure Front Door private IP for secure private link access"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "nsgIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Array of resource IDs for the network security groups created"
                              },
                              "value": [
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-frontend', parameters('discriminator'), parameters('clientName')))]",
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-backend', parameters('discriminator'), parameters('clientName')))]",
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-privatelink', parameters('discriminator'), parameters('clientName')))]"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "The subnet IDs of the virtual network for connectivity and integration"
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": {
                          "name": "[parameters('subnets')[copyIndex()].name]",
                          "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), parameters('subnets')[copyIndex()].name)]"
                        }
                      }
                    },
                    "vnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network for reference"
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "privateDnsZone",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientNames": {
                    "value": "[parameters('clientNames')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "14599907349237042825"
                    }
                  },
                  "parameters": {
                    "clientNames": {
                      "type": "array",
                      "metadata": {
                        "description": "Names of the clients"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Distinguished qualifier for resources"
                      }
                    },
                    "privateDnsZonesMetadata": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "zoneName": "privatelink.azurewebsites.net",
                          "linkType": "app"
                        },
                        {
                          "zoneName": "[format('privatelink{0}', environment().suffixes.sqlServerHostname)]",
                          "linkType": "sql"
                        },
                        {
                          "zoneName": "privatelink.monitor.azure.com",
                          "linkType": "pai"
                        },
                        {
                          "zoneName": "privatelink.vaultcore.azure.net",
                          "linkType": "pkv"
                        },
                        {
                          "zoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
                          "linkType": "stg"
                        },
                        {
                          "zoneName": "[format('privatelink.file.{0}', environment().suffixes.storage)]",
                          "linkType": "stg"
                        },
                        {
                          "zoneName": "privatelink.insights.azure.com",
                          "linkType": "pai"
                        },
                        {
                          "zoneName": "[format('privatelink.{0}', environment().suffixes.storage)]",
                          "linkType": "stg"
                        }
                      ],
                      "metadata": {
                        "description": "List of Private DNS Zones to create"
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneNames",
                        "count": "[length(parameters('privateDnsZonesMetadata'))]",
                        "input": "[parameters('privateDnsZonesMetadata')[copyIndex('privateDnsZoneNames')].zoneName]"
                      },
                      {
                        "name": "dnsLinks",
                        "count": "[length(range(0, mul(length(parameters('clientNames')), length(variables('privateDnsZoneNames')))))]",
                        "input": {
                          "clientName": "[parameters('clientNames')[div(range(0, mul(length(parameters('clientNames')), length(variables('privateDnsZoneNames'))))[copyIndex('dnsLinks')], length(variables('privateDnsZoneNames')))]]",
                          "zoneName": "[variables('privateDnsZoneNames')[mod(range(0, mul(length(parameters('clientNames')), length(variables('privateDnsZoneNames'))))[copyIndex('dnsLinks')], length(variables('privateDnsZoneNames')))]]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateDnsZones",
                        "count": "[length(variables('privateDnsZoneNames'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('privateDnsZoneNames')[copyIndex()]]",
                      "location": "global"
                    },
                    {
                      "copy": {
                        "name": "privateDnsLinksToHub",
                        "count": "[length(variables('privateDnsZoneNames'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', variables('privateDnsZoneNames')[copyIndex()], format('dnsl-{0}-central-{1}', parameters('discriminator'), variables('privateDnsZoneNames')[copyIndex()]))]",
                      "location": "global",
                      "properties": {
                        "virtualNetwork": {
                          "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}-central', parameters('discriminator')))]"
                        },
                        "registrationEnabled": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNames')[copyIndex()])]",
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNames')[copyIndex()])]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateDnsLinksToSpoke",
                        "count": "[length(variables('dnsLinks'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', variables('privateDnsZoneNames')[indexOf(variables('privateDnsZoneNames'), variables('dnsLinks')[copyIndex()].zoneName)], format('dnsl-{0}-{1}-{2}', parameters('discriminator'), variables('dnsLinks')[copyIndex()].clientName, variables('dnsLinks')[copyIndex()].zoneName))]",
                      "location": "global",
                      "properties": {
                        "virtualNetwork": {
                          "id": "[resourceId(format('rg-{0}', variables('dnsLinks')[copyIndex()].clientName), 'Microsoft.Network/virtualNetworks', format('vnet-{0}-{1}', parameters('discriminator'), variables('dnsLinks')[copyIndex()].clientName))]"
                        },
                        "registrationEnabled": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNames')[indexOf(variables('privateDnsZoneNames'), variables('dnsLinks')[copyIndex()].zoneName)])]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "createDnsRecords",
                        "count": "[length(variables('privateDnsZoneNames'))]",
                        "mode": "serial",
                        "batchSize": 3
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('createDnsRecords-{0}-{1}', variables('privateDnsZoneNames')[copyIndex()], copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "clientNames": {
                            "value": "[parameters('clientNames')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "privateDnsZoneName": {
                            "value": "[variables('privateDnsZoneNames')[copyIndex()]]"
                          },
                          "endpointType": {
                            "value": "[parameters('privateDnsZonesMetadata')[copyIndex()].linkType]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "16478426447501899170"
                            }
                          },
                          "parameters": {
                            "clientNames": {
                              "type": "array",
                              "metadata": {
                                "description": "List of client names for extracting private endpoint information"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "endpointType": {
                              "type": "string",
                              "metadata": {
                                "description": "Type of endpoint service for DNS record creation"
                              }
                            },
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the private DNS zone where records will be created"
                              }
                            },
                            "timeout": {
                              "type": "int",
                              "defaultValue": 600,
                              "metadata": {
                                "description": "Timeout duration in seconds for the deployment script, defaults to 300 seconds"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deploymentScripts",
                              "apiVersion": "2023-08-01",
                              "name": "[format('create-dns-records-{0}-{1}', parameters('endpointType'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, parameters('endpointType')))]",
                              "location": "[resourceGroup().location]",
                              "kind": "AzureCLI",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', resourceId('rg-Central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                                }
                              },
                              "properties": {
                                "azCliVersion": "2.40.0",
                                "scriptContent": "      #!/bin/bash\n      set -e\n\n      RESOURCE_GROUP=\"rg-central\"\n      DNS_ZONE_NAME=\"$privateDnsZoneName\"\n      SUBSCRIPTION_ID=$(az account show --query id -o tsv)\n\n      echo \"Subscription: $SUBSCRIPTION_ID\"\n      echo \"Resource Group: $RESOURCE_GROUP\"\n      echo \"DNS Zone: $DNS_ZONE_NAME\"\n      echo \"Endpoint Type: $ENDPOINT_TYPE\"\n      echo \"Clients: $clientNames\"\n\n      # Validate subscription context\n      if [ -z \"$SUBSCRIPTION_ID\" ]; then\n        echo \"Error: Subscription ID is empty\"\n        exit 1\n      fi\n      az account set --subscription \"$SUBSCRIPTION_ID\" || {\n        echo \"Error: Failed to set subscription $SUBSCRIPTION_ID\"\n        exit 1\n      }\n\n      # Handle App Service (skipped as AFD-managed)\n      if [ \"$ENDPOINT_TYPE\" = \"app\" ]; then\n        echo \"Skipping App Service DNS - managed by AFD\"\n        echo \"{\\\"privateDnsRecords\\\": \\\"Skipped App Service DNS records, managed by AFD\\\"}\" \\\n          > $AZ_SCRIPTS_OUTPUT_PATH\n        exit 0\n      fi\n\n      # Collect IPs and FQDNs from spoke deployments\n      ALL_IPS=\"\"\n      ALL_FQDNS=\"\"\n      for SPOKE in ${clientNames//,/ }; do\n        echo \"Checking rg-$SPOKE for $ENDPOINT_TYPE...\"\n        IPS=$(az deployment group show \\\n          -g \"rg-$SPOKE\" \\\n          -n \"extractPrivateIp-$SPOKE-$ENDPOINT_TYPE\" \\\n          --query \"properties.outputs.privateIps.value\" \\\n          -o tsv 2>/dev/null || echo \"\")\n        FQDNS=$(az deployment group show \\\n          -g \"rg-$SPOKE\" \\\n          -n \"extractPrivateIp-$SPOKE-$ENDPOINT_TYPE\" \\\n          --query \"properties.outputs.privateFqdns.value\" \\\n          -o tsv 2>/dev/null || echo \"\")\n        ALL_IPS=\"$ALL_IPS,$IPS\"\n        ALL_FQDNS=\"$ALL_FQDNS,$FQDNS\"\n      done\n\n      # Clean and validate collected data\n      IPS=$(echo \"$ALL_IPS\" | tr ',' '\\n' | sort -u | grep -v \"^$\" | tr '\\n' ' ')\n      FQDNS=$(echo \"$ALL_FQDNS\" | tr ',' '\\n' | sort -u | grep -v \"^$\" | tr '\\n' ' ')\n      echo \"Collected IPs: $IPS\"\n      echo \"Collected FQDNs: $FQDNS\"\n\n      if [ -z \"$IPS\" ] || [ -z \"$FQDNS\" ]; then\n        echo \"Error: No valid IPs or FQDNs for $ENDPOINT_TYPE\"\n        echo \"{\\\"privateDnsRecords\\\": \\\"Failed: No valid IPs or FQDNs for $ENDPOINT_TYPE\\\"}\" \\\n          > $AZ_SCRIPTS_OUTPUT_PATH\n        exit 1\n      fi\n\n      # Create DNS A records\n      for fqdn in $FQDNS; do\n        for ip in $IPS; do\n          echo \"Checking A record for $fqdn -> $ip...\"\n          if ! az network private-dns record-set a show \\\n            -g \"$RESOURCE_GROUP\" \\\n            -z \"$DNS_ZONE_NAME\" \\\n            -n \"$fqdn\" \\\n            --query \"aRecords[?ipv4Address=='$ip']\" \\\n            -o tsv 2>/dev/null; then\n            echo \"Creating A record for $fqdn -> $ip\"\n            az network private-dns record-set a create \\\n              -g \"$RESOURCE_GROUP\" \\\n              -z \"$DNS_ZONE_NAME\" \\\n              -n \"$fqdn\" \\\n              --ttl 3600 || {\n              echo \"Error: Failed to create A record for $fqdn\"\n              exit 1\n            }\n            az network private-dns record-set a add-record \\\n              -g \"$RESOURCE_GROUP\" \\\n              -z \"$DNS_ZONE_NAME\" \\\n              -n \"$fqdn\" \\\n              --ipv4-address \"$ip\" || {\n              echo \"Error: Failed to add IP $ip to $fqdn\"\n              exit 1\n            }\n          else\n            echo \"A record for $fqdn -> $ip exists, skipping\"\n          fi\n        done\n      done\n\n      echo \"Created DNS records for $ENDPOINT_TYPE\"\n      echo \"{\\\"privateDnsRecords\\\": \\\"Created A records for $ENDPOINT_TYPE\\\"}\" \\\n        > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                                "environmentVariables": [
                                  {
                                    "name": "clientNames",
                                    "value": "[join(parameters('clientNames'), ',')]"
                                  },
                                  {
                                    "name": "ENDPOINT_TYPE",
                                    "value": "[parameters('endpointType')]"
                                  },
                                  {
                                    "name": "privateDnsZoneName",
                                    "value": "[parameters('privateDnsZoneName')]"
                                  }
                                ],
                                "timeout": "[format('PT{0}S', parameters('timeout'))]",
                                "retentionInterval": "PT1H",
                                "cleanupPreference": "OnSuccess"
                              },
                              "dependsOn": [
                                "privateIpExtractor"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateIpExtractor",
                                "count": "[length(parameters('clientNames'))]"
                              },
                              "condition": "[not(equals(parameters('endpointType'), 'app'))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('extractPrivateIp-{0}-{1}', parameters('clientNames')[copyIndex()], parameters('endpointType'))]",
                              "resourceGroup": "[format('rg-{0}', parameters('clientNames')[copyIndex()])]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateEndpointId": "[if(equals(parameters('endpointType'), 'stg'), createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientNames')[copyIndex()])), 'Microsoft.Network/privateEndpoints', format('pe-stg{0}{1}', parameters('discriminator'), parameters('clientNames')[copyIndex()]))), createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientNames')[copyIndex()])), 'Microsoft.Network/privateEndpoints', format('pe-{0}-{1}-{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientNames')[copyIndex()]))))]",
                                  "timeout": {
                                    "value": "[parameters('timeout')]"
                                  },
                                  "endpointType": {
                                    "value": "[parameters('endpointType')]"
                                  },
                                  "clientName": {
                                    "value": "[parameters('clientNames')[copyIndex()]]"
                                  },
                                  "discriminator": {
                                    "value": "[parameters('discriminator')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "11742486970552839752"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Resource ID of the Private Endpoint to extract IP and FQDN information"
                                      }
                                    },
                                    "timeout": {
                                      "type": "int",
                                      "defaultValue": 20,
                                      "metadata": {
                                        "description": "Timeout duration in minutes for the script execution"
                                      }
                                    },
                                    "endpointType": {
                                      "type": "string",
                                      "defaultValue": "app",
                                      "allowedValues": [
                                        "app",
                                        "pai",
                                        "law",
                                        "pkv",
                                        "sql",
                                        "stg"
                                      ],
                                      "metadata": {
                                        "description": "Type of service for additional DNS configuration, specifying the resource type"
                                      }
                                    },
                                    "clientName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Client name associated with the Private Endpoint or service"
                                      }
                                    },
                                    "discriminator": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Unique qualifier for resource naming to avoid conflicts"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "endpointName": "[if(equals(parameters('endpointType'), 'stg'), toLower(format('ep-{0}{1}{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientName'))), format('ep-{0}-{1}-{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientName')))]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(equals(parameters('endpointType'), 'app'))]",
                                      "type": "Microsoft.Resources/deploymentScripts",
                                      "apiVersion": "2023-08-01",
                                      "name": "[format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))]",
                                      "kind": "AzureCLI",
                                      "location": "[resourceGroup().location]",
                                      "identity": {
                                        "type": "UserAssigned",
                                        "userAssignedIdentities": {
                                          "[format('{0}', resourceId('rg-central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                                        }
                                      },
                                      "properties": {
                                        "azCliVersion": "2.40.0",
                                        "scriptContent": "      #!/bin/bash\n      set -e\n\n      echo \"Subscription ID: $SUBSCRIPTION_ID\"\n      echo \"Private Endpoint ID: $PRIVATE_ENDPOINT_ID\"\n      echo \"Service Type: $ENDPOINT_TYPE\"\n\n      # Quick subscription check\n      if [ -z \"$SUBSCRIPTION_ID\" ]; then\n        echo \"Error: Subscription ID is empty\"\n        exit 1\n      fi\n      az account set --subscription \"$SUBSCRIPTION_ID\" || {\n        echo \"Error: Failed to set subscription\"\n        exit 1\n      }\n\n      # Get Private IPs with timeout\n      PRIVATE_IPS=$(timeout 120s az network private-endpoint show \\\n        --ids \"$PRIVATE_ENDPOINT_ID\" \\\n        --query \"networkInterfaces[*].ipConfigurations[*].privateIPAddress\" \\\n        -o tsv 2>/dev/null | sort -u | tr '\\n' ',' | sed 's/,$//')\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"No IPs found, checking NICs (limited to first NIC)...\"\n        NIC_ID=$(timeout 60s az network private-endpoint show \\\n          --ids \"$PRIVATE_ENDPOINT_ID\" \\\n          --query \"networkInterfaces[0].id\" \\\n          -o tsv 2>/dev/null)\n        if [ -n \"$NIC_ID\" ]; then\n          PRIVATE_IPS=$(timeout 60s az network nic show \\\n            --ids \"$NIC_ID\" \\\n            --query \"ipConfigurations[?contains(name, 'privateEndpointIpConfig')].privateIpAddress\" \\\n            -o tsv 2>/dev/null | head -n 1)\n        fi\n      fi\n\n      # Validate IPs\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"Error: No valid private IPs found\"\n        exit 1\n      fi\n      VALID_IPS=\"\"\n      for IP in $(echo \"$PRIVATE_IPS\" | tr ',' '\\n'); do\n        if [[ \"$IP\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n          VALID_IPS=\"$VALID_IPS,$IP\"\n        fi\n      done\n      PRIVATE_IPS=$(echo \"$VALID_IPS\" | sed 's/^,//' | tr '\\n' ',' | sed 's/,$//')\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"Error: No valid IPs after validation\"\n        exit 1\n      fi\n\n      # Generate FQDNs\n      case \"$ENDPOINT_TYPE\" in\n        \"pai\") PRIVATE_FQDNS=\"pai-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.monitor.azure.com\" ;;\n        \"sql\") PRIVATE_FQDNS=\"sql-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.database.windows.net\" ;;\n        \"stg\") PRIVATE_FQDNS=\"stg${DISCRIMINATOR}${CLIENT_NAME}.privatelink.blob.core.windows.net\" ;;\n        \"pkv\") PRIVATE_FQDNS=\"pkv-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.vaultcore.azure.net\" ;;\n        \"law\") PRIVATE_FQDNS=\"law-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.monitor.azure.com\" ;;\n        \"app\") echo \"Skipping App Service\"; \\\n              echo \"{\\\"privateIps\\\": [], \\\"privateFqdns\\\": []}\" > $AZ_SCRIPTS_OUTPUT_PATH; \\\n              exit 0 ;;\n        *) echo \"Error: Unsupported type $ENDPOINT_TYPE\"; exit 1 ;;\n      esac\n\n      if [ -z \"$PRIVATE_FQDNS\" ]; then\n        echo \"Error: No FQDNs generated\"\n        exit 1\n      fi\n\n      # Output results\n      echo \"Private IPs: $PRIVATE_IPS\"\n      echo \"Private FQDNs: $PRIVATE_FQDNS\"\n      echo \"{\\\"privateIps\\\": [\\\"${PRIVATE_IPS//,/\\\",\\\"}\\\"], \\\"privateFqdns\\\": [\\\"${PRIVATE_FQDNS//,/\\\",\\\"}\\\"]}\" \\\n        > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                                        "environmentVariables": [
                                          {
                                            "name": "SUBSCRIPTION_ID",
                                            "value": "[subscription().subscriptionId]"
                                          },
                                          {
                                            "name": "PRIVATE_ENDPOINT_ID",
                                            "value": "[parameters('privateEndpointId')]"
                                          },
                                          {
                                            "name": "ENDPOINT_TYPE",
                                            "value": "[parameters('endpointType')]"
                                          },
                                          {
                                            "name": "CLIENT_NAME",
                                            "value": "[parameters('clientName')]"
                                          },
                                          {
                                            "name": "DISCRIMINATOR",
                                            "value": "[parameters('discriminator')]"
                                          },
                                          {
                                            "name": "REGION",
                                            "value": "[resourceGroup().location]"
                                          },
                                          {
                                            "name": "STORAGE_SUFFIX",
                                            "value": "core.windows.net"
                                          }
                                        ],
                                        "timeout": "[format('PT{0}M', parameters('timeout'))]",
                                        "retentionInterval": "PT24H",
                                        "cleanupPreference": "OnSuccess"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "privateIps": {
                                      "type": "array",
                                      "value": "[if(not(equals(parameters('endpointType'), 'app')), reference(resourceId('Microsoft.Resources/deploymentScripts', format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))), '2023-08-01').outputs.privateIps, createArray())]"
                                    },
                                    "privateFqdns": {
                                      "type": "array",
                                      "value": "[if(not(equals(parameters('endpointType'), 'app')), reference(resourceId('Microsoft.Resources/deploymentScripts', format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))), '2023-08-01').outputs.privateFqdns, createArray())]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNames')[copyIndex()])]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'centralVNet')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "firewall",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('firewallName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "subnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'centralVNet'), '2022-09-01').outputs.subnets.value[0].id]"
                  },
                  "dnsServers": {
                    "value": [
                      "168.63.129.16"
                    ]
                  },
                  "enableDnsProxy": {
                    "value": true
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "12095878678278748264"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Azure Firewall"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location where the Azure Firewall will be deployed"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Subnet ID where the Azure Firewall will be deployed"
                      }
                    },
                    "threatIntelMode": {
                      "type": "string",
                      "defaultValue": "Alert",
                      "allowedValues": [
                        "Off",
                        "Alert",
                        "Deny"
                      ],
                      "metadata": {
                        "description": "Threat intelligence mode for the Azure Firewall"
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "metadata": {
                        "description": "DNS servers for the Azure Firewall"
                      }
                    },
                    "enableDnsProxy": {
                      "type": "bool",
                      "metadata": {
                        "description": "Enable DNS proxy on the Azure Firewall"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags to apply to the Azure Firewall"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-05-01",
                      "name": "[format('ip-{0}', parameters('name'))]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Static"
                      }
                    },
                    {
                      "type": "Microsoft.Network/firewallPolicies",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}-policy', parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "dnsSettings": {
                          "servers": "[parameters('dnsServers')]",
                          "enableProxy": "[parameters('enableDnsProxy')]"
                        },
                        "threatIntelMode": "[parameters('threatIntelMode')]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/azureFirewalls",
                      "apiVersion": "2022-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "[format('ipconfig-{0}', parameters('name'))]",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('subnetId')]"
                              },
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('ip-{0}', parameters('name')))]"
                              }
                            }
                          }
                        ],
                        "firewallPolicy": {
                          "id": "[resourceId('Microsoft.Network/firewallPolicies', format('{0}-policy', parameters('name')))]"
                        },
                        "networkRuleCollections": [
                          {
                            "name": "AllowDNSAndARMAndSSH",
                            "properties": {
                              "priority": 200,
                              "action": {
                                "type": "Allow"
                              },
                              "rules": [
                                {
                                  "name": "AllowDNSResolver",
                                  "sourceAddresses": [
                                    "10.0.2.0/24"
                                  ],
                                  "destinationAddresses": [
                                    "168.63.129.16"
                                  ],
                                  "protocols": [
                                    "TCP",
                                    "UDP"
                                  ],
                                  "destinationPorts": [
                                    "53"
                                  ]
                                },
                                {
                                  "name": "AllowManagement",
                                  "sourceAddresses": [
                                    "10.0.2.0/24"
                                  ],
                                  "destinationAddresses": [
                                    "AzureResourceManager"
                                  ],
                                  "protocols": [
                                    "TCP"
                                  ],
                                  "destinationPorts": [
                                    "443"
                                  ]
                                },
                                {
                                  "name": "AllowSSHInbound",
                                  "sourceAddresses": [
                                    "*"
                                  ],
                                  "destinationAddresses": [
                                    "172.174.206.65"
                                  ],
                                  "protocols": [
                                    "TCP"
                                  ],
                                  "destinationPorts": [
                                    "22"
                                  ]
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "tags": "[parameters('tags')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/firewallPolicies', format('{0}-policy', parameters('name')))]",
                        "[resourceId('Microsoft.Network/publicIPAddresses', format('ip-{0}', parameters('name')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Azure Firewall"
                      },
                      "value": "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Azure Firewall"
                      },
                      "value": "[parameters('name')]"
                    },
                    "publicIp": {
                      "type": "string",
                      "metadata": {
                        "description": "The public IP configuration of the Azure Firewall"
                      },
                      "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2022-05-01').ipConfigurations[0].properties.publicIPAddress.id]"
                    },
                    "privateIp": {
                      "type": "string",
                      "metadata": {
                        "description": "The private IP of the Azure Firewall"
                      },
                      "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2022-05-01').ipConfigurations[0].properties.privateIPAddress]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'centralVNet')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "sentinel",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('sentinelWorkspaceName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "3218942024624621110"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Geographic location for the Sentinel (Log Analytics) workspace"
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Sentinel (Log Analytics) workspace for monitoring"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "sku": {
                          "name": "PerGB2018"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed Log Analytics Workspace"
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'centralVNet')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "frontDoor",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('frontDoorName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "10834916497582131726"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Azure Front Door instance for global traffic management"
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "Premium_AzureFrontDoor",
                      "allowedValues": [
                        "Premium_AzureFrontDoor"
                      ],
                      "metadata": {
                        "description": "SKU tier for the Azure Front Door, restricted to Premium for Private Link support"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the Azure Front Door instance"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Cdn/profiles",
                      "apiVersion": "2024-02-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "sku": {
                        "name": "[parameters('skuTier')]"
                      },
                      "properties": {
                        "originResponseTimeoutSeconds": 60
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed Azure Front Door instance"
                      },
                      "value": "[resourceId('Microsoft.Cdn/profiles', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Azure Front Door instance for reference"
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'centralVNet')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', 'centralResourceGroup')]",
        "clientResources"
      ]
    },
    {
      "copy": {
        "name": "clientResources",
        "count": "[length(parameters('clients'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-resources', parameters('clients')[copyIndex()].name)]",
      "resourceGroup": "[format('rg-{0}', parameters('clients')[copyIndex()].name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clientName": {
            "value": "[parameters('clients')[copyIndex()].name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "cidr": {
            "value": "[parameters('clients')[copyIndex()].cidr]"
          },
          "subnets": {
            "value": "[parameters('clients')[copyIndex()].subnets]"
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "13465300974824329842"
            }
          },
          "parameters": {
            "clientName": {
              "type": "string",
              "metadata": {
                "description": "Name of the client for resource deployment"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for client-specific resources"
              }
            },
            "cidr": {
              "type": "string",
              "metadata": {
                "description": "CIDR block for the client VNet"
              }
            },
            "subnets": {
              "type": "object",
              "metadata": {
                "description": "Subnet configuration for the client VNet"
              }
            },
            "discriminator": {
              "type": "string",
              "metadata": {
                "description": "Unique qualifier for resource naming to avoid conflicts"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('clientName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "addressPrefixes": {
                    "value": [
                      "[parameters('cidr')]"
                    ]
                  },
                  "topology": {
                    "value": "spoke"
                  },
                  "subnets": {
                    "value": [
                      {
                        "name": "FrontEnd",
                        "addressPrefix": "[parameters('subnets').frontEnd]"
                      },
                      {
                        "name": "BackEnd",
                        "addressPrefix": "[parameters('subnets').backEnd]"
                      },
                      {
                        "name": "PrivateLink",
                        "addressPrefix": "[parameters('subnets').privateLink]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "16722299546444263991"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Creates a virtual network with the specified naming"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Geographic location for all resources"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Address prefixes for the virtual network"
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Subnet configuration for the virtual network"
                      }
                    },
                    "topology": {
                      "type": "string",
                      "allowedValues": [
                        "hub",
                        "spoke"
                      ],
                      "metadata": {
                        "description": "Spoke or hub designation for VNet creation"
                      }
                    }
                  },
                  "variables": {
                    "vnetName": "[format('vnet-{0}-{1}', parameters('discriminator'), parameters('name'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2023-02-01",
                      "name": "[variables('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "privateEndpointNetworkPolicies": "[if(equals(parameters('topology'), 'spoke'), 'Disabled', null())]",
                                "privateLinkServiceNetworkPolicies": "[if(equals(parameters('topology'), 'spoke'), 'Disabled', null())]",
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "networkSecurityGroup": "[if(equals(parameters('topology'), 'spoke'), createObject('id', reference(resourceId('Microsoft.Resources/deployments', format('nsg-{0}-{1}', parameters('discriminator'), parameters('name'))), '2022-09-01').outputs.nsgIds.value[copyIndex('subnets')]), null())]",
                                "delegations": "[if(and(equals(parameters('topology'), 'spoke'), equals(parameters('subnets')[copyIndex('subnets')].name, 'FrontEnd')), createArray(createObject('name', 'MicrosoftWebServerFarms', 'properties', createObject('serviceName', 'Microsoft.Web/serverFarms'))), null())]"
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('nsg-{0}-{1}', parameters('discriminator'), parameters('name')))]"
                      ]
                    },
                    {
                      "condition": "[equals(parameters('topology'), 'spoke')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('nsg-{0}-{1}', parameters('discriminator'), parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "clientName": {
                            "value": "[parameters('name')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "frontDoorPrivateIp": {
                            "value": "10.0.0.0/16"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "13792003035119420994"
                            }
                          },
                          "parameters": {
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the client for the network security groups"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Geographic location for the network security groups"
                              }
                            },
                            "frontDoorPrivateIp": {
                              "type": "string",
                              "metadata": {
                                "description": "CIDR block for the Azure Front Door private IP range for secure access"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-backend', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-VNet-Traffic",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "VirtualNetwork",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "VirtualNetwork",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic within the virtual network for secure communication"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-frontend', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-FrontDoor-Private-IP",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "[parameters('frontDoorPrivateIp')]",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic from Azure Front Door private IP for secure access"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-02-01",
                              "name": "[format('nsg-{0}-{1}-privatelink', parameters('discriminator'), parameters('clientName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "Allow-FrontDoor-Private-IP",
                                    "properties": {
                                      "priority": 100,
                                      "direction": "Inbound",
                                      "access": "Allow",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "[parameters('frontDoorPrivateIp')]",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Allow traffic from Azure Front Door private IP for secure private link access"
                                    }
                                  },
                                  {
                                    "name": "Deny-All-Inbound",
                                    "properties": {
                                      "priority": 4096,
                                      "direction": "Inbound",
                                      "access": "Deny",
                                      "protocol": "*",
                                      "sourceAddressPrefix": "*",
                                      "sourcePortRange": "*",
                                      "destinationAddressPrefix": "*",
                                      "destinationPortRange": "*",
                                      "description": "Deny all other inbound traffic for security"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "nsgIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Array of resource IDs for the network security groups created"
                              },
                              "value": [
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-frontend', parameters('discriminator'), parameters('clientName')))]",
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-backend', parameters('discriminator'), parameters('clientName')))]",
                                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-{1}-privatelink', parameters('discriminator'), parameters('clientName')))]"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "The subnet IDs of the virtual network for connectivity and integration"
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": {
                          "name": "[parameters('subnets')[copyIndex()].name]",
                          "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), parameters('subnets')[copyIndex()].name)]"
                        }
                      }
                    },
                    "vnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network for reference"
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('asp-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('asp-{0}-{1}', parameters('discriminator'), parameters('clientName'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sku": {
                    "value": {
                      "name": "S1",
                      "tier": "Standard",
                      "size": "S1",
                      "capacity": 1
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "10601726760920605906"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the App Service Plan for the client application"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Geographic location where the App Service Plan will be deployed"
                      }
                    },
                    "sku": {
                      "type": "object",
                      "defaultValue": {
                        "name": "S1",
                        "tier": "Standard",
                        "size": "S1",
                        "capacity": 2
                      },
                      "metadata": {
                        "description": "SKU configuration defining the performance tier for the App Service Plan"
                      }
                    },
                    "isLinux": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Indicates whether the App Service Plan is configured for Linux, defaults to false"
                      }
                    },
                    "maximumElasticWorkerCount": {
                      "type": "int",
                      "defaultValue": 10,
                      "metadata": {
                        "description": "Maximum number of instances allowed for the App Service Plan for scalability"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the App Service Plan"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/serverfarms",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": "[parameters('sku')]",
                      "properties": {
                        "reserved": "[parameters('isLinux')]",
                        "maximumElasticWorkerCount": "[parameters('maximumElasticWorkerCount')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed App Service Plan"
                      },
                      "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the App Service Plan for reference"
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('app-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "subnetId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2022-09-01').outputs.subnets.value[0].id]"
                  },
                  "appServicePlanId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('asp-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2022-09-01').outputs.id.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "5492126475009328451"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the client for the App Service"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Subnet ID for VNet integration to enable private network access (FrontEnd subnet)"
                      }
                    },
                    "appServicePlanId": {
                      "type": "string",
                      "metadata": {
                        "description": "ID of the App Service Plan to associate with this App Service"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags to apply to the App Service for organization and billing"
                      }
                    },
                    "appSettings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Environment variables (App Settings) for configuring the App Service"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2022-03-01",
                      "name": "[format('app-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "serverFarmId": "[parameters('appServicePlanId')]",
                        "publicNetworkAccess": "Enabled",
                        "siteConfig": {
                          "copy": [
                            {
                              "name": "appSettings",
                              "count": "[length(parameters('appSettings'))]",
                              "input": {
                                "name": "[parameters('appSettings')[copyIndex('appSettings')].name]",
                                "value": "[parameters('appSettings')[copyIndex('appSettings')].value]"
                              }
                            }
                          ],
                          "vnetRouteAllEnabled": true,
                          "scmIpSecurityRestrictionsUseMain": true,
                          "ipSecurityRestrictions": [
                            {
                              "name": "AllowPrivateSubnet",
                              "priority": 100,
                              "action": "Allow",
                              "vnetSubnetResourceId": "[parameters('subnetId')]",
                              "description": "Allow traffic from the FrontEnd subnet for secure access"
                            },
                            {
                              "name": "DenyPublic",
                              "priority": 200,
                              "action": "Deny",
                              "ipAddress": "0.0.0.0/0",
                              "description": "Deny all public internet access"
                            }
                          ]
                        },
                        "httpsOnly": true
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Web/sites/networkConfig",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'virtualNetwork')]",
                      "properties": {
                        "subnetResourceId": "[parameters('subnetId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'web')]",
                      "properties": {
                        "ipSecurityRestrictions": [
                          {
                            "name": "AllowVNetOnly",
                            "action": "Allow",
                            "priority": 100,
                            "vnetSubnetResourceId": "[parameters('subnetId')]",
                            "description": "Allow traffic only from the FrontEnd VNet for enhanced isolation"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                        "[resourceId('Microsoft.Web/sites/networkConfig', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'virtualNetwork')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed App Service"
                      },
                      "value": "[resourceId('Microsoft.Web/sites', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "defaultHostName": {
                      "type": "string",
                      "metadata": {
                        "description": "The default URL of the App Service for public access before Private Link"
                      },
                      "value": "[reference(resourceId('Microsoft.Web/sites', format('app-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2022-03-01').defaultHostName]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the App Service for reference"
                      },
                      "value": "[format('app-{0}-{1}', parameters('discriminator'), parameters('clientName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('asp-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "adminLogin": {
                    "value": "adminUser"
                  },
                  "adminPassword": {
                    "value": "Password@123!"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "703255344866134639"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the SQL Server instance for the client"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the SQL Server instance"
                      }
                    },
                    "adminLogin": {
                      "type": "string",
                      "metadata": {
                        "description": "Administrator login credential for the SQL Server"
                      }
                    },
                    "adminPassword": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Administrator password credential for the SQL Server, marked as secure"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Sql/servers",
                      "apiVersion": "2021-05-01-preview",
                      "name": "[format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publicNetworkAccess": "Disabled",
                        "administratorLogin": "[parameters('adminLogin')]",
                        "administratorLoginPassword": "[parameters('adminPassword')]"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('pe-{0}', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "clientName": {
                            "value": "[parameters('clientName')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "name": {
                            "value": "[format('pe-{0}', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "privateLinkServiceId": {
                            "value": "[resourceId('Microsoft.Sql/servers', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "groupId": {
                            "value": "sqlServer"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "8916153214771809304"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private Endpoint for the target resource"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the target service for the Private Link connection"
                              }
                            },
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Client name associated with the Private Endpoint"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Group ID specifying the type of resource (e.g., blob, sqlServer, vault, insights)"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Tags to apply to the Private Endpoint for organization and billing"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "subnet": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Network/virtualNetworks/subnets', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'privateLink')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('plsc-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('groupId')]"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed Private Endpoint"
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the SQL Server instance"
                      },
                      "value": "[resourceId('Microsoft.Sql/servers', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "privateEndpointId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Private Endpoint for SQL Server"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('pe-{0}', format('sql-{0}-{1}', parameters('discriminator'), parameters('clientName')))), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('stg{0}{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "7025526779572649880"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the client for the Storage Account"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard_LRS",
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS"
                      ],
                      "metadata": {
                        "description": "Replication type for the Storage Account, defaults to Standard_LRS"
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "metadata": {
                        "description": "Type of Storage Account, defaults to general-purpose V2"
                      }
                    },
                    "enableBlobSoftDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Flag to enable blob soft delete retention policy for data recovery"
                      }
                    },
                    "blobSoftDeleteRetentionDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Retention period in days for blob soft delete, defaults to disabled"
                      }
                    },
                    "enableContainerSoftDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Flag to enable container soft delete retention policy for data recovery"
                      }
                    },
                    "containerSoftDeleteRetentionDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Retention period in days for container soft delete, defaults to disabled"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the Storage Account"
                      }
                    }
                  },
                  "variables": {
                    "storageAccountName": "[toLower(format('stg{0}{1}', parameters('discriminator'), parameters('clientName')))]",
                    "privateEndpointName": "[format('pe-{0}', variables('storageAccountName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[variables('storageAccountName')]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "supportsHttpsTrafficOnly": true
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
                      "properties": {
                        "deleteRetentionPolicy": "[if(greater(parameters('blobSoftDeleteRetentionDays'), 0), createObject('enabled', parameters('enableBlobSoftDelete'), 'days', parameters('blobSoftDeleteRetentionDays')), createObject('enabled', false()))]",
                        "containerDeleteRetentionPolicy": "[if(greater(parameters('containerSoftDeleteRetentionDays'), 0), createObject('enabled', parameters('enableContainerSoftDelete'), 'days', parameters('containerSoftDeleteRetentionDays')), createObject('enabled', false()))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[variables('privateEndpointName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "clientName": {
                            "value": "[parameters('clientName')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "name": {
                            "value": "[variables('privateEndpointName')]"
                          },
                          "privateLinkServiceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                          },
                          "groupId": {
                            "value": "blob"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "8916153214771809304"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private Endpoint for the target resource"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the target service for the Private Link connection"
                              }
                            },
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Client name associated with the Private Endpoint"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Group ID specifying the type of resource (e.g., blob, sqlServer, vault, insights)"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Tags to apply to the Private Endpoint for organization and billing"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "subnet": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Network/virtualNetworks/subnets', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'privateLink')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('plsc-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('groupId')]"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed Private Endpoint"
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Storage Account"
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Storage Account for reference"
                      },
                      "value": "[variables('storageAccountName')]"
                    },
                    "primaryEndpoints": {
                      "type": "object",
                      "metadata": {
                        "description": "The primary endpoints of the Storage Account for connectivity"
                      },
                      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').primaryEndpoints]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "233592358594744818"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the client for the Key Vault instance"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "standard",
                      "allowedValues": [
                        "standard",
                        "premium"
                      ],
                      "metadata": {
                        "description": "SKU of the Key Vault, defaults to standard"
                      }
                    },
                    "accessPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Access policies defining permissions for administrators or applications"
                      }
                    },
                    "softDeleteRetentionDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "metadata": {
                        "description": "Soft delete retention period in days, minimum 7 days for recovery"
                      }
                    },
                    "enablePurgeProtection": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Flag to enable purge protection for enhanced security"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the Key Vault instance"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "sku": {
                          "family": "A",
                          "name": "[parameters('skuName')]"
                        },
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": "[parameters('accessPolicies')]",
                        "enableSoftDelete": true,
                        "softDeleteRetentionInDays": "[parameters('softDeleteRetentionDays')]",
                        "enablePurgeProtection": "[parameters('enablePurgeProtection')]"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('pe-{0}', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "clientName": {
                            "value": "[parameters('clientName')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "name": {
                            "value": "[format('pe-{0}', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "privateLinkServiceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "groupId": {
                            "value": "vault"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "8916153214771809304"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private Endpoint for the target resource"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the target service for the Private Link connection"
                              }
                            },
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Client name associated with the Private Endpoint"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Group ID specifying the type of resource (e.g., blob, sqlServer, vault, insights)"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Tags to apply to the Private Endpoint for organization and billing"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "subnet": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Network/virtualNetworks/subnets', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'privateLink')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('plsc-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('groupId')]"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed Private Endpoint"
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed Key Vault instance"
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "vaultUri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the Key Vault for accessing secrets, keys, and certificates"
                      },
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2022-07-01').vaultUri]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Key Vault instance for reference"
                      },
                      "value": "[format('pkv-{0}-{1}', parameters('discriminator'), parameters('clientName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "enablePrivateLinkScope": {
                    "value": true
                  },
                  "enablePrivateLink": {
                    "value": true
                  },
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "6890778167178666352"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the client for the Application Insights instance"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "applicationType": {
                      "type": "string",
                      "defaultValue": "web",
                      "allowedValues": [
                        "web",
                        "other",
                        "java",
                        "node.js"
                      ],
                      "metadata": {
                        "description": "Type of application for Application Insights monitoring"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for organizing and billing the Application Insights instance"
                      }
                    },
                    "enablePrivateLinkScope": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Flag to enable Private Link Scope integration for enhanced security"
                      }
                    },
                    "restrictPublicAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Flag to restrict public access to Application Insights for security"
                      }
                    },
                    "enablePrivateLink": {
                      "type": "bool",
                      "metadata": {
                        "description": "Flag to enable Private Link for the Application Insights instance"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "[resourceGroup().location]",
                      "kind": "[parameters('applicationType')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "Application_Type": "[parameters('applicationType')]",
                        "publicNetworkAccessForIngestion": "[if(parameters('restrictPublicAccess'), 'Disabled', 'Enabled')]",
                        "publicNetworkAccessForQuery": "[if(parameters('restrictPublicAccess'), 'Disabled', 'Enabled')]",
                        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('law-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                        "IngestionMode": "LogAnalytics"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', format('law-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2023-09-01",
                      "name": "[format('law-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "retentionInDays": 30,
                        "sku": {
                          "name": "PerGB2018"
                        }
                      }
                    },
                    {
                      "condition": "[parameters('enablePrivateLinkScope')]",
                      "type": "microsoft.insights/privateLinkScopes",
                      "apiVersion": "2021-07-01-preview",
                      "name": "[format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                      "location": "global",
                      "properties": {
                        "accessModeSettings": {
                          "ingestionAccessMode": "PrivateOnly",
                          "queryAccessMode": "PrivateOnly"
                        }
                      }
                    },
                    {
                      "condition": "[parameters('enablePrivateLink')]",
                      "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                      "apiVersion": "2021-07-01-preview",
                      "name": "[format('{0}/{1}', format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName')), format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                      "properties": {
                        "linkedResourceId": "[resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                        "[resourceId('microsoft.insights/privateLinkScopes', format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enablePrivateLink')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('pe-{0}', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "clientName": {
                            "value": "[parameters('clientName')]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          },
                          "name": {
                            "value": "[format('pe-{0}', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "privateLinkServiceId": {
                            "value": "[resourceId('microsoft.insights/privateLinkScopes', format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                          },
                          "groupId": {
                            "value": "azuremonitor"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "8916153214771809304"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private Endpoint for the target resource"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the target service for the Private Link connection"
                              }
                            },
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Client name associated with the Private Endpoint"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Group ID specifying the type of resource (e.g., blob, sqlServer, vault, insights)"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Tags to apply to the Private Endpoint for organization and billing"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "subnet": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Network/virtualNetworks/subnets', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), 'privateLink')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('plsc-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('groupId')]"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed Private Endpoint"
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]",
                        "[resourceId('microsoft.insights/privateLinkScopes', format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Application Insights instance"
                      },
                      "value": "[resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "instrumentationKey": {
                      "type": "string",
                      "metadata": {
                        "description": "The instrumentation key for Application Insights monitoring"
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2020-02-02').InstrumentationKey]"
                    },
                    "connectionString": {
                      "type": "string",
                      "metadata": {
                        "description": "The connection string for Application Insights connectivity"
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '2020-02-02').ConnectionString]"
                    },
                    "appInsightsId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Application Insights instance for reference"
                      },
                      "value": "[resourceId('Microsoft.Insights/components', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "privateLinkScopeId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Private Link Scope, if enabled"
                      },
                      "value": "[if(parameters('enablePrivateLinkScope'), resourceId('microsoft.insights/privateLinkScopes', format('pls-{0}-{1}', parameters('discriminator'), parameters('clientName'))), '')]"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the associated Log Analytics Workspace"
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', format('law-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
                    },
                    "privateEndpointId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Private Endpoint for App Insights, if enabled"
                      },
                      "value": "[if(parameters('enablePrivateLink'), reference(resourceId('Microsoft.Resources/deployments', format('pe-{0}', format('pai-{0}-{1}', parameters('discriminator'), parameters('clientName')))), '2022-09-01').outputs.id.value, '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientName'))), 'Microsoft.Resources/deployments', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "clientResourceGroups"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "privateDnsZone",
      "resourceGroup": "rg-central",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clientNames": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('clients'))]",
                "input": "[parameters('clients')[copyIndex('value')].name]"
              }
            ]
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "14599907349237042825"
            }
          },
          "parameters": {
            "clientNames": {
              "type": "array",
              "metadata": {
                "description": "Names of the clients"
              }
            },
            "discriminator": {
              "type": "string",
              "metadata": {
                "description": "Distinguished qualifier for resources"
              }
            },
            "privateDnsZonesMetadata": {
              "type": "array",
              "defaultValue": [
                {
                  "zoneName": "privatelink.azurewebsites.net",
                  "linkType": "app"
                },
                {
                  "zoneName": "[format('privatelink{0}', environment().suffixes.sqlServerHostname)]",
                  "linkType": "sql"
                },
                {
                  "zoneName": "privatelink.monitor.azure.com",
                  "linkType": "pai"
                },
                {
                  "zoneName": "privatelink.vaultcore.azure.net",
                  "linkType": "pkv"
                },
                {
                  "zoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
                  "linkType": "stg"
                },
                {
                  "zoneName": "[format('privatelink.file.{0}', environment().suffixes.storage)]",
                  "linkType": "stg"
                },
                {
                  "zoneName": "privatelink.insights.azure.com",
                  "linkType": "pai"
                },
                {
                  "zoneName": "[format('privatelink.{0}', environment().suffixes.storage)]",
                  "linkType": "stg"
                }
              ],
              "metadata": {
                "description": "List of Private DNS Zones to create"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "privateDnsZoneNames",
                "count": "[length(parameters('privateDnsZonesMetadata'))]",
                "input": "[parameters('privateDnsZonesMetadata')[copyIndex('privateDnsZoneNames')].zoneName]"
              },
              {
                "name": "dnsLinks",
                "count": "[length(range(0, mul(length(parameters('clientNames')), length(variables('privateDnsZoneNames')))))]",
                "input": {
                  "clientName": "[parameters('clientNames')[div(range(0, mul(length(parameters('clientNames')), length(variables('privateDnsZoneNames'))))[copyIndex('dnsLinks')], length(variables('privateDnsZoneNames')))]]",
                  "zoneName": "[variables('privateDnsZoneNames')[mod(range(0, mul(length(parameters('clientNames')), length(variables('privateDnsZoneNames'))))[copyIndex('dnsLinks')], length(variables('privateDnsZoneNames')))]]"
                }
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "privateDnsZones",
                "count": "[length(variables('privateDnsZoneNames'))]"
              },
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('privateDnsZoneNames')[copyIndex()]]",
              "location": "global"
            },
            {
              "copy": {
                "name": "privateDnsLinksToHub",
                "count": "[length(variables('privateDnsZoneNames'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('privateDnsZoneNames')[copyIndex()], format('dnsl-{0}-central-{1}', parameters('discriminator'), variables('privateDnsZoneNames')[copyIndex()]))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}-central', parameters('discriminator')))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNames')[copyIndex()])]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNames')[copyIndex()])]"
              ]
            },
            {
              "copy": {
                "name": "privateDnsLinksToSpoke",
                "count": "[length(variables('dnsLinks'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('privateDnsZoneNames')[indexOf(variables('privateDnsZoneNames'), variables('dnsLinks')[copyIndex()].zoneName)], format('dnsl-{0}-{1}-{2}', parameters('discriminator'), variables('dnsLinks')[copyIndex()].clientName, variables('dnsLinks')[copyIndex()].zoneName))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId(format('rg-{0}', variables('dnsLinks')[copyIndex()].clientName), 'Microsoft.Network/virtualNetworks', format('vnet-{0}-{1}', parameters('discriminator'), variables('dnsLinks')[copyIndex()].clientName))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNames')[indexOf(variables('privateDnsZoneNames'), variables('dnsLinks')[copyIndex()].zoneName)])]"
              ]
            },
            {
              "copy": {
                "name": "createDnsRecords",
                "count": "[length(variables('privateDnsZoneNames'))]",
                "mode": "serial",
                "batchSize": 3
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('createDnsRecords-{0}-{1}', variables('privateDnsZoneNames')[copyIndex()], copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientNames": {
                    "value": "[parameters('clientNames')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  },
                  "privateDnsZoneName": {
                    "value": "[variables('privateDnsZoneNames')[copyIndex()]]"
                  },
                  "endpointType": {
                    "value": "[parameters('privateDnsZonesMetadata')[copyIndex()].linkType]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "16478426447501899170"
                    }
                  },
                  "parameters": {
                    "clientNames": {
                      "type": "array",
                      "metadata": {
                        "description": "List of client names for extracting private endpoint information"
                      }
                    },
                    "discriminator": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique qualifier for resource naming to avoid conflicts"
                      }
                    },
                    "endpointType": {
                      "type": "string",
                      "metadata": {
                        "description": "Type of endpoint service for DNS record creation"
                      }
                    },
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the private DNS zone where records will be created"
                      }
                    },
                    "timeout": {
                      "type": "int",
                      "defaultValue": 600,
                      "metadata": {
                        "description": "Timeout duration in seconds for the deployment script, defaults to 300 seconds"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2023-08-01",
                      "name": "[format('create-dns-records-{0}-{1}', parameters('endpointType'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, parameters('endpointType')))]",
                      "location": "[resourceGroup().location]",
                      "kind": "AzureCLI",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('rg-Central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                        }
                      },
                      "properties": {
                        "azCliVersion": "2.40.0",
                        "scriptContent": "      #!/bin/bash\n      set -e\n\n      RESOURCE_GROUP=\"rg-central\"\n      DNS_ZONE_NAME=\"$privateDnsZoneName\"\n      SUBSCRIPTION_ID=$(az account show --query id -o tsv)\n\n      echo \"Subscription: $SUBSCRIPTION_ID\"\n      echo \"Resource Group: $RESOURCE_GROUP\"\n      echo \"DNS Zone: $DNS_ZONE_NAME\"\n      echo \"Endpoint Type: $ENDPOINT_TYPE\"\n      echo \"Clients: $clientNames\"\n\n      # Validate subscription context\n      if [ -z \"$SUBSCRIPTION_ID\" ]; then\n        echo \"Error: Subscription ID is empty\"\n        exit 1\n      fi\n      az account set --subscription \"$SUBSCRIPTION_ID\" || {\n        echo \"Error: Failed to set subscription $SUBSCRIPTION_ID\"\n        exit 1\n      }\n\n      # Handle App Service (skipped as AFD-managed)\n      if [ \"$ENDPOINT_TYPE\" = \"app\" ]; then\n        echo \"Skipping App Service DNS - managed by AFD\"\n        echo \"{\\\"privateDnsRecords\\\": \\\"Skipped App Service DNS records, managed by AFD\\\"}\" \\\n          > $AZ_SCRIPTS_OUTPUT_PATH\n        exit 0\n      fi\n\n      # Collect IPs and FQDNs from spoke deployments\n      ALL_IPS=\"\"\n      ALL_FQDNS=\"\"\n      for SPOKE in ${clientNames//,/ }; do\n        echo \"Checking rg-$SPOKE for $ENDPOINT_TYPE...\"\n        IPS=$(az deployment group show \\\n          -g \"rg-$SPOKE\" \\\n          -n \"extractPrivateIp-$SPOKE-$ENDPOINT_TYPE\" \\\n          --query \"properties.outputs.privateIps.value\" \\\n          -o tsv 2>/dev/null || echo \"\")\n        FQDNS=$(az deployment group show \\\n          -g \"rg-$SPOKE\" \\\n          -n \"extractPrivateIp-$SPOKE-$ENDPOINT_TYPE\" \\\n          --query \"properties.outputs.privateFqdns.value\" \\\n          -o tsv 2>/dev/null || echo \"\")\n        ALL_IPS=\"$ALL_IPS,$IPS\"\n        ALL_FQDNS=\"$ALL_FQDNS,$FQDNS\"\n      done\n\n      # Clean and validate collected data\n      IPS=$(echo \"$ALL_IPS\" | tr ',' '\\n' | sort -u | grep -v \"^$\" | tr '\\n' ' ')\n      FQDNS=$(echo \"$ALL_FQDNS\" | tr ',' '\\n' | sort -u | grep -v \"^$\" | tr '\\n' ' ')\n      echo \"Collected IPs: $IPS\"\n      echo \"Collected FQDNs: $FQDNS\"\n\n      if [ -z \"$IPS\" ] || [ -z \"$FQDNS\" ]; then\n        echo \"Error: No valid IPs or FQDNs for $ENDPOINT_TYPE\"\n        echo \"{\\\"privateDnsRecords\\\": \\\"Failed: No valid IPs or FQDNs for $ENDPOINT_TYPE\\\"}\" \\\n          > $AZ_SCRIPTS_OUTPUT_PATH\n        exit 1\n      fi\n\n      # Create DNS A records\n      for fqdn in $FQDNS; do\n        for ip in $IPS; do\n          echo \"Checking A record for $fqdn -> $ip...\"\n          if ! az network private-dns record-set a show \\\n            -g \"$RESOURCE_GROUP\" \\\n            -z \"$DNS_ZONE_NAME\" \\\n            -n \"$fqdn\" \\\n            --query \"aRecords[?ipv4Address=='$ip']\" \\\n            -o tsv 2>/dev/null; then\n            echo \"Creating A record for $fqdn -> $ip\"\n            az network private-dns record-set a create \\\n              -g \"$RESOURCE_GROUP\" \\\n              -z \"$DNS_ZONE_NAME\" \\\n              -n \"$fqdn\" \\\n              --ttl 3600 || {\n              echo \"Error: Failed to create A record for $fqdn\"\n              exit 1\n            }\n            az network private-dns record-set a add-record \\\n              -g \"$RESOURCE_GROUP\" \\\n              -z \"$DNS_ZONE_NAME\" \\\n              -n \"$fqdn\" \\\n              --ipv4-address \"$ip\" || {\n              echo \"Error: Failed to add IP $ip to $fqdn\"\n              exit 1\n            }\n          else\n            echo \"A record for $fqdn -> $ip exists, skipping\"\n          fi\n        done\n      done\n\n      echo \"Created DNS records for $ENDPOINT_TYPE\"\n      echo \"{\\\"privateDnsRecords\\\": \\\"Created A records for $ENDPOINT_TYPE\\\"}\" \\\n        > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                        "environmentVariables": [
                          {
                            "name": "clientNames",
                            "value": "[join(parameters('clientNames'), ',')]"
                          },
                          {
                            "name": "ENDPOINT_TYPE",
                            "value": "[parameters('endpointType')]"
                          },
                          {
                            "name": "privateDnsZoneName",
                            "value": "[parameters('privateDnsZoneName')]"
                          }
                        ],
                        "timeout": "[format('PT{0}S', parameters('timeout'))]",
                        "retentionInterval": "PT1H",
                        "cleanupPreference": "OnSuccess"
                      },
                      "dependsOn": [
                        "privateIpExtractor"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateIpExtractor",
                        "count": "[length(parameters('clientNames'))]"
                      },
                      "condition": "[not(equals(parameters('endpointType'), 'app'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('extractPrivateIp-{0}-{1}', parameters('clientNames')[copyIndex()], parameters('endpointType'))]",
                      "resourceGroup": "[format('rg-{0}', parameters('clientNames')[copyIndex()])]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateEndpointId": "[if(equals(parameters('endpointType'), 'stg'), createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientNames')[copyIndex()])), 'Microsoft.Network/privateEndpoints', format('pe-stg{0}{1}', parameters('discriminator'), parameters('clientNames')[copyIndex()]))), createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('clientNames')[copyIndex()])), 'Microsoft.Network/privateEndpoints', format('pe-{0}-{1}-{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientNames')[copyIndex()]))))]",
                          "timeout": {
                            "value": "[parameters('timeout')]"
                          },
                          "endpointType": {
                            "value": "[parameters('endpointType')]"
                          },
                          "clientName": {
                            "value": "[parameters('clientNames')[copyIndex()]]"
                          },
                          "discriminator": {
                            "value": "[parameters('discriminator')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "11742486970552839752"
                            }
                          },
                          "parameters": {
                            "privateEndpointId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the Private Endpoint to extract IP and FQDN information"
                              }
                            },
                            "timeout": {
                              "type": "int",
                              "defaultValue": 20,
                              "metadata": {
                                "description": "Timeout duration in minutes for the script execution"
                              }
                            },
                            "endpointType": {
                              "type": "string",
                              "defaultValue": "app",
                              "allowedValues": [
                                "app",
                                "pai",
                                "law",
                                "pkv",
                                "sql",
                                "stg"
                              ],
                              "metadata": {
                                "description": "Type of service for additional DNS configuration, specifying the resource type"
                              }
                            },
                            "clientName": {
                              "type": "string",
                              "metadata": {
                                "description": "Client name associated with the Private Endpoint or service"
                              }
                            },
                            "discriminator": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique qualifier for resource naming to avoid conflicts"
                              }
                            }
                          },
                          "variables": {
                            "endpointName": "[if(equals(parameters('endpointType'), 'stg'), toLower(format('ep-{0}{1}{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientName'))), format('ep-{0}-{1}-{2}', parameters('endpointType'), parameters('discriminator'), parameters('clientName')))]"
                          },
                          "resources": [
                            {
                              "condition": "[not(equals(parameters('endpointType'), 'app'))]",
                              "type": "Microsoft.Resources/deploymentScripts",
                              "apiVersion": "2023-08-01",
                              "name": "[format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))]",
                              "kind": "AzureCLI",
                              "location": "[resourceGroup().location]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', resourceId('rg-central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                                }
                              },
                              "properties": {
                                "azCliVersion": "2.40.0",
                                "scriptContent": "      #!/bin/bash\n      set -e\n\n      echo \"Subscription ID: $SUBSCRIPTION_ID\"\n      echo \"Private Endpoint ID: $PRIVATE_ENDPOINT_ID\"\n      echo \"Service Type: $ENDPOINT_TYPE\"\n\n      # Quick subscription check\n      if [ -z \"$SUBSCRIPTION_ID\" ]; then\n        echo \"Error: Subscription ID is empty\"\n        exit 1\n      fi\n      az account set --subscription \"$SUBSCRIPTION_ID\" || {\n        echo \"Error: Failed to set subscription\"\n        exit 1\n      }\n\n      # Get Private IPs with timeout\n      PRIVATE_IPS=$(timeout 120s az network private-endpoint show \\\n        --ids \"$PRIVATE_ENDPOINT_ID\" \\\n        --query \"networkInterfaces[*].ipConfigurations[*].privateIPAddress\" \\\n        -o tsv 2>/dev/null | sort -u | tr '\\n' ',' | sed 's/,$//')\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"No IPs found, checking NICs (limited to first NIC)...\"\n        NIC_ID=$(timeout 60s az network private-endpoint show \\\n          --ids \"$PRIVATE_ENDPOINT_ID\" \\\n          --query \"networkInterfaces[0].id\" \\\n          -o tsv 2>/dev/null)\n        if [ -n \"$NIC_ID\" ]; then\n          PRIVATE_IPS=$(timeout 60s az network nic show \\\n            --ids \"$NIC_ID\" \\\n            --query \"ipConfigurations[?contains(name, 'privateEndpointIpConfig')].privateIpAddress\" \\\n            -o tsv 2>/dev/null | head -n 1)\n        fi\n      fi\n\n      # Validate IPs\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"Error: No valid private IPs found\"\n        exit 1\n      fi\n      VALID_IPS=\"\"\n      for IP in $(echo \"$PRIVATE_IPS\" | tr ',' '\\n'); do\n        if [[ \"$IP\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n          VALID_IPS=\"$VALID_IPS,$IP\"\n        fi\n      done\n      PRIVATE_IPS=$(echo \"$VALID_IPS\" | sed 's/^,//' | tr '\\n' ',' | sed 's/,$//')\n      if [ -z \"$PRIVATE_IPS\" ]; then\n        echo \"Error: No valid IPs after validation\"\n        exit 1\n      fi\n\n      # Generate FQDNs\n      case \"$ENDPOINT_TYPE\" in\n        \"pai\") PRIVATE_FQDNS=\"pai-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.monitor.azure.com\" ;;\n        \"sql\") PRIVATE_FQDNS=\"sql-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.database.windows.net\" ;;\n        \"stg\") PRIVATE_FQDNS=\"stg${DISCRIMINATOR}${CLIENT_NAME}.privatelink.blob.core.windows.net\" ;;\n        \"pkv\") PRIVATE_FQDNS=\"pkv-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.vaultcore.azure.net\" ;;\n        \"law\") PRIVATE_FQDNS=\"law-${DISCRIMINATOR}-${CLIENT_NAME}.privatelink.monitor.azure.com\" ;;\n        \"app\") echo \"Skipping App Service\"; \\\n              echo \"{\\\"privateIps\\\": [], \\\"privateFqdns\\\": []}\" > $AZ_SCRIPTS_OUTPUT_PATH; \\\n              exit 0 ;;\n        *) echo \"Error: Unsupported type $ENDPOINT_TYPE\"; exit 1 ;;\n      esac\n\n      if [ -z \"$PRIVATE_FQDNS\" ]; then\n        echo \"Error: No FQDNs generated\"\n        exit 1\n      fi\n\n      # Output results\n      echo \"Private IPs: $PRIVATE_IPS\"\n      echo \"Private FQDNs: $PRIVATE_FQDNS\"\n      echo \"{\\\"privateIps\\\": [\\\"${PRIVATE_IPS//,/\\\",\\\"}\\\"], \\\"privateFqdns\\\": [\\\"${PRIVATE_FQDNS//,/\\\",\\\"}\\\"]}\" \\\n        > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                                "environmentVariables": [
                                  {
                                    "name": "SUBSCRIPTION_ID",
                                    "value": "[subscription().subscriptionId]"
                                  },
                                  {
                                    "name": "PRIVATE_ENDPOINT_ID",
                                    "value": "[parameters('privateEndpointId')]"
                                  },
                                  {
                                    "name": "ENDPOINT_TYPE",
                                    "value": "[parameters('endpointType')]"
                                  },
                                  {
                                    "name": "CLIENT_NAME",
                                    "value": "[parameters('clientName')]"
                                  },
                                  {
                                    "name": "DISCRIMINATOR",
                                    "value": "[parameters('discriminator')]"
                                  },
                                  {
                                    "name": "REGION",
                                    "value": "[resourceGroup().location]"
                                  },
                                  {
                                    "name": "STORAGE_SUFFIX",
                                    "value": "core.windows.net"
                                  }
                                ],
                                "timeout": "[format('PT{0}M', parameters('timeout'))]",
                                "retentionInterval": "PT24H",
                                "cleanupPreference": "OnSuccess"
                              }
                            }
                          ],
                          "outputs": {
                            "privateIps": {
                              "type": "array",
                              "value": "[if(not(equals(parameters('endpointType'), 'app')), reference(resourceId('Microsoft.Resources/deploymentScripts', format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))), '2023-08-01').outputs.privateIps, createArray())]"
                            },
                            "privateFqdns": {
                              "type": "array",
                              "value": "[if(not(equals(parameters('endpointType'), 'app')), reference(resourceId('Microsoft.Resources/deploymentScripts', format('extract-private-ip-{0}-{1}', variables('endpointName'), uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId, variables('endpointName')))), '2023-08-01').outputs.privateFqdns, createArray())]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNames')[copyIndex()])]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'centralResourcesDeployment')]",
        "clientResources"
      ]
    },
    {
      "copy": {
        "name": "peering",
        "count": "[length(parameters('clients'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('vnetPeering-{0}', parameters('clients')[copyIndex()].name)]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clientName": {
            "value": "[parameters('clients')[copyIndex()].name]"
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "8384731034014193023"
            }
          },
          "parameters": {
            "clientName": {
              "type": "string"
            },
            "discriminator": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "hubPeering",
              "resourceGroup": "rg-central",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "2958044444251234789"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string"
                    },
                    "discriminator": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "spokeVnetName": "[format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName'))]",
                    "spokeVnetRg": "[format('rg-{0}', parameters('clientName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', format('vnet-{0}-Central', parameters('discriminator')), format('{0}-to-{1}', format('vnet-{0}-Central', parameters('discriminator')), variables('spokeVnetName')))]",
                      "properties": {
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(variables('spokeVnetRg'), 'Microsoft.Network/virtualNetworks', variables('spokeVnetName'))]"
                        },
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": true,
                        "useRemoteGateways": false
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "spokePeering",
              "resourceGroup": "[format('rg-{0}', parameters('clientName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clientName": {
                    "value": "[parameters('clientName')]"
                  },
                  "discriminator": {
                    "value": "[parameters('discriminator')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "2032057057955620510"
                    }
                  },
                  "parameters": {
                    "clientName": {
                      "type": "string"
                    },
                    "discriminator": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "hubVnetRg": "rg-central",
                    "hubVnetName": "[format('vnet-{0}-Central', parameters('discriminator'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), format('{0}-to-{1}', format('vnet-{0}-{1}', parameters('discriminator'), parameters('clientName')), variables('hubVnetName')))]",
                      "properties": {
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(variables('hubVnetRg'), 'Microsoft.Network/virtualNetworks', variables('hubVnetName'))]"
                        },
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": false,
                        "useRemoteGateways": false
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'centralResourcesDeployment')]",
        "clientResources",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, 'rg-central'), 'Microsoft.Resources/deployments', 'privateDnsZone')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "frontDoorConfiguration",
      "resourceGroup": "rg-central",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clientNames": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('clients'))]",
                "input": "[parameters('clients')[copyIndex('value')].name]"
              }
            ]
          },
          "name": {
            "value": "globalFrontDoor"
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "3417702538424329485"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Azure Front Door instance for global traffic management"
              }
            },
            "clientNames": {
              "type": "array",
              "metadata": {
                "description": "List of client names to configure Front Door resources for"
              }
            },
            "discriminator": {
              "type": "string",
              "metadata": {
                "description": "Unique qualifier for resource naming to avoid conflicts"
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Subscription ID for resource references"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "[format('configure-frontend-{0}', parameters('name'))]",
              "location": "eastus",
              "kind": "AzureCLI",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('rg-central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.40.0",
                "scriptContent": "      #!/bin/bash\n      set -ex\n\n      RESOURCE_GROUP=\"$RESOURCE_GROUP\"\n      FRONTDOOR_NAME=\"$FRONTDOOR_NAME\"\n      DISCRIMINATOR=\"$DISCRIMINATOR\"\n      SUBSCRIPTION_ID=\"$SUBSCRIPTION_ID\"\n\n      IFS=',' read -r -a CLIENT_NAMES <<< \"$CLIENT_NAMES\"\n\n      az config set extension.use_dynamic_install=yes_without_prompt\n\n      # Create an array to store private link connection IDs\n      declare -a PRIVATE_LINK_IDS=()\n\n      for CLIENT in \"${CLIENT_NAMES[@]}\"; do\n        ORIGIN_GROUP=\"afd-og-${DISCRIMINATOR}-${CLIENT}\"\n        ORIGIN_NAME=\"afd-o-${DISCRIMINATOR}-${CLIENT}\"\n        ENDPOINT_NAME=\"afd-ep-${DISCRIMINATOR}-${CLIENT}\"\n        ROUTE_NAME=\"afd-rt-${DISCRIMINATOR}-${CLIENT}\"\n        ORIGIN_HOST=\"app-${DISCRIMINATOR}-${CLIENT}.privatelink.azurewebsites.net\"\n        CLIENT_RG=\"rg-${CLIENT}\"\n        APP_NAME=\"app-${DISCRIMINATOR}-${CLIENT}\"\n\n        # Create the origin group\n        echo \"Creating origin group: $ORIGIN_GROUP\"\n        az afd origin-group create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --origin-group-name \"$ORIGIN_GROUP\" \\\n          --probe-request-type GET \\\n          --probe-protocol Https \\\n          --probe-interval-in-seconds 30 \\\n          --sample-size 4 \\\n          --successful-samples-required 3 \\\n          --probe-path \"/\" \\\n          --additional-latency-in-milliseconds 50\n\n        # Create the origin with private link\n        echo \"Creating origin with private link: $ORIGIN_NAME\"\n        OUTPUT=$(az afd origin create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --origin-group-name \"$ORIGIN_GROUP\" \\\n          --origin-name \"$ORIGIN_NAME\" \\\n          --host-name \"$ORIGIN_HOST\" \\\n          --origin-host-header \"$ORIGIN_HOST\" \\\n          --http-port 80 \\\n          --https-port 443 \\\n          --priority 1 \\\n          --weight 1000 \\\n          --enabled-state Enabled \\\n          --enable-private-link true \\\n          --private-link-location \"eastus\" \\\n          --private-link-resource \"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CLIENT_RG}/providers/Microsoft.Web/sites/${APP_NAME}\" \\\n          --private-link-sub-resource-type \"sites\" \\\n          --private-link-request-message \"AFD App Service origin Private Link request.\" \\\n          --enforce-certificate-name-check true -o json)\n\n        # Extract private link connection ID\n        echo \"Extracting private link ID\"\n        PL_ID=$(echo \"$OUTPUT\" | jq -r '.privateLinkResource.id')\n        if [ -n \"$PL_ID\" ]; then\n          PRIVATE_LINK_IDS+=(\"$PL_ID\")\n          echo \"Added private link ID: $PL_ID\"\n        else\n          echo \"WARNING: Failed to extract private link ID for $CLIENT\"\n        fi\n\n        # Create the endpoint\n        echo \"Creating endpoint: $ENDPOINT_NAME\"\n        az afd endpoint create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --endpoint-name \"$ENDPOINT_NAME\" \\\n          --enabled-state Enabled\n\n        # Create the route\n        echo \"Creating route: $ROUTE_NAME\"\n        az afd route create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --endpoint-name \"$ENDPOINT_NAME\" \\\n          --route-name \"$ROUTE_NAME\" \\\n          --origin-group \"$ORIGIN_GROUP\" \\\n          --supported-protocols Https \\\n          --forwarding-protocol HttpsOnly \\\n          --link-to-default-domain Enabled \\\n          --https-redirect Disabled\n      done\n\n      # Return the private link IDs for the next script to use\n      echo \"Returning private link IDs\"\n      echo \"{\\\"privateLinks\\\": [$(printf '\"%s\",' \"${PRIVATE_LINK_IDS[@]}\" | sed 's/,$/')]}\" > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                "environmentVariables": [
                  {
                    "name": "RESOURCE_GROUP",
                    "value": "[resourceGroup().name]"
                  },
                  {
                    "name": "FRONTDOOR_NAME",
                    "value": "[parameters('name')]"
                  },
                  {
                    "name": "DISCRIMINATOR",
                    "value": "[parameters('discriminator')]"
                  },
                  {
                    "name": "CLIENT_NAMES",
                    "value": "[join(parameters('clientNames'), ',')]"
                  },
                  {
                    "name": "SUBSCRIPTION_ID",
                    "value": "[parameters('subscriptionId')]"
                  }
                ],
                "retentionInterval": "PT1H",
                "timeout": "PT20M",
                "cleanupPreference": "OnSuccess"
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "approve-pl-connections",
              "location": "eastus",
              "kind": "AzureCLI",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('rg-central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.40.0",
                "scriptContent": "      #!/bin/bash\n      set -ex\n      \n      # Parse input parameters\n      DISCRIMINATOR=\"$DISCRIMINATOR\"\n      SUBSCRIPTION_ID=\"$SUBSCRIPTION_ID\" \n      IFS=',' read -r -a CLIENT_NAMES <<< \"$CLIENT_NAMES\"\n      \n      # Parse private link IDs from previous script\n      PRIVATE_LINKS=$(echo $PRIVATE_LINKS | jq -r '.privateLinks[]')\n      \n      # Function to wait for private endpoint connection to be created\n      wait_for_pe_connection() {\n        local app_id=$1\n        local max_attempts=30\n        local attempt=0\n        local found=false\n        \n        echo \"Waiting for private endpoint connection to be created for $app_id...\"\n        \n        while [ $attempt -lt $max_attempts ] && [ \"$found\" = false ]; do\n          connections=$(az network private-endpoint-connection list --id \"$app_id\" -o json 2>/dev/null || echo \"[]\")\n          connection_count=$(echo \"$connections\" | jq 'length')\n          \n          if [ \"$connection_count\" -gt 0 ]; then\n            found=true\n            echo \"Private endpoint connection found for $app_id\"\n          else\n            echo \"Attempt $((attempt+1))/$max_attempts: No private endpoint connections found yet, waiting...\"\n            sleep 10\n            ((attempt++))\n          fi\n        done\n        \n        if [ \"$found\" = false ]; then\n          echo \"Failed to find private endpoint connection after $max_attempts attempts\"\n          return 1\n        fi\n        \n        return 0\n      }\n      \n      # Process each client\n      for CLIENT in \"${CLIENT_NAMES[@]}\"; do\n        # App properties\n        CLIENT_RG=\"rg-${CLIENT}\"\n        APP_NAME=\"app-${DISCRIMINATOR}-${CLIENT}\"\n        APP_ID=\"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CLIENT_RG}/providers/Microsoft.Web/sites/${APP_NAME}\"\n        \n        echo \"Processing app: $APP_NAME in resource group: $CLIENT_RG\"\n        \n        # Wait for private endpoint connection to be created\n        if wait_for_pe_connection \"$APP_ID\"; then\n          # Approve all pending connections for the app\n          echo \"Approving private endpoint connections for $APP_NAME...\"\n          \n          connections=$(az network private-endpoint-connection list --id \"$APP_ID\" -o json)\n          for connection in $(echo \"$connections\" | jq -c '.[]'); do\n            connection_id=$(echo \"$connection\" | jq -r '.id')\n            status=$(echo \"$connection\" | jq -r '.properties.privateLinkServiceConnectionState.status // \"Unknown\"')\n            \n            if [ \"$status\" != \"Approved\" ]; then\n              echo \"Approving connection: $connection_id\"\n              az network private-endpoint-connection approve \\\n                --id \"$connection_id\" \\\n                --description \"Approved by deployment script\" || echo \"Failed to approve connection: $connection_id\"\n            else\n              echo \"Connection already approved: $connection_id\"\n            fi\n          done\n          \n          # Wait for approval to take effect (10 seconds)\n          echo \"Waiting for approval to take effect...\"\n          sleep 10\n          \n          # Disable public network access for the app\n          echo \"Disabling public network access for $APP_NAME...\"\n          az webapp update \\\n            --resource-group \"$CLIENT_RG\" \\\n            --name \"$APP_NAME\" \\\n            --set publicNetworkAccess=Disabled || echo \"Failed to disable public network access for $APP_NAME\"\n        else\n          echo \"Skipping approval for $APP_NAME due to timeout waiting for private endpoint connection\"\n        fi\n      done\n      \n      echo \"Private link approval and public network access configuration completed\"\n      echo \"{\\\"status\\\": \\\"completed\\\"}\" > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                "environmentVariables": [
                  {
                    "name": "DISCRIMINATOR",
                    "value": "[parameters('discriminator')]"
                  },
                  {
                    "name": "CLIENT_NAMES",
                    "value": "[join(parameters('clientNames'), ',')]"
                  },
                  {
                    "name": "SUBSCRIPTION_ID",
                    "value": "[parameters('subscriptionId')]"
                  },
                  {
                    "name": "PRIVATE_LINKS",
                    "value": "[string(reference(resourceId('Microsoft.Resources/deploymentScripts', format('configure-frontend-{0}', parameters('name'))), '2023-08-01').outputs)]"
                  }
                ],
                "retentionInterval": "PT1H",
                "timeout": "PT20M",
                "cleanupPreference": "OnSuccess"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', format('configure-frontend-{0}', parameters('name')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "peering"
      ]
    }
  ]
}