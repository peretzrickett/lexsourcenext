{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "6207817350935432990"
    }
  },
  "parameters": {
    "clients": {
      "type": "array",
      "metadata": {
        "description": "List of client configurations for deployment"
      }
    },
    "discriminator": {
      "type": "string",
      "defaultValue": "lexsb",
      "metadata": {
        "description": "Unique qualifier for resource naming to avoid conflicts"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "testFrontDoorConfiguration",
      "resourceGroup": "rg-central",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clientNames": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('clients'))]",
                "input": "[parameters('clients')[copyIndex('value')].name]"
              }
            ]
          },
          "name": {
            "value": "globalFrontDoor"
          },
          "discriminator": {
            "value": "[parameters('discriminator')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "3417702538424329485"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Azure Front Door instance for global traffic management"
              }
            },
            "clientNames": {
              "type": "array",
              "metadata": {
                "description": "List of client names to configure Front Door resources for"
              }
            },
            "discriminator": {
              "type": "string",
              "metadata": {
                "description": "Unique qualifier for resource naming to avoid conflicts"
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Subscription ID for resource references"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "[format('configure-frontend-{0}', parameters('name'))]",
              "location": "eastus",
              "kind": "AzureCLI",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('rg-central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.40.0",
                "scriptContent": "      #!/bin/bash\n      set -ex\n\n      RESOURCE_GROUP=\"$RESOURCE_GROUP\"\n      FRONTDOOR_NAME=\"$FRONTDOOR_NAME\"\n      DISCRIMINATOR=\"$DISCRIMINATOR\"\n      SUBSCRIPTION_ID=\"$SUBSCRIPTION_ID\"\n\n      IFS=',' read -r -a CLIENT_NAMES <<< \"$CLIENT_NAMES\"\n\n      az config set extension.use_dynamic_install=yes_without_prompt\n\n      # Create an array to store private link connection IDs\n      declare -a PRIVATE_LINK_IDS=()\n\n      for CLIENT in \"${CLIENT_NAMES[@]}\"; do\n        ORIGIN_GROUP=\"afd-og-${DISCRIMINATOR}-${CLIENT}\"\n        ORIGIN_NAME=\"afd-o-${DISCRIMINATOR}-${CLIENT}\"\n        ENDPOINT_NAME=\"afd-ep-${DISCRIMINATOR}-${CLIENT}\"\n        ROUTE_NAME=\"afd-rt-${DISCRIMINATOR}-${CLIENT}\"\n        ORIGIN_HOST=\"app-${DISCRIMINATOR}-${CLIENT}.privatelink.azurewebsites.net\"\n        CLIENT_RG=\"rg-${CLIENT}\"\n        APP_NAME=\"app-${DISCRIMINATOR}-${CLIENT}\"\n\n        # Create the origin group\n        echo \"Creating origin group: $ORIGIN_GROUP\"\n        az afd origin-group create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --origin-group-name \"$ORIGIN_GROUP\" \\\n          --probe-request-type GET \\\n          --probe-protocol Https \\\n          --probe-interval-in-seconds 30 \\\n          --sample-size 4 \\\n          --successful-samples-required 3 \\\n          --probe-path \"/\" \\\n          --additional-latency-in-milliseconds 50\n\n        # Create the origin with private link\n        echo \"Creating origin with private link: $ORIGIN_NAME\"\n        OUTPUT=$(az afd origin create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --origin-group-name \"$ORIGIN_GROUP\" \\\n          --origin-name \"$ORIGIN_NAME\" \\\n          --host-name \"$ORIGIN_HOST\" \\\n          --origin-host-header \"$ORIGIN_HOST\" \\\n          --http-port 80 \\\n          --https-port 443 \\\n          --priority 1 \\\n          --weight 1000 \\\n          --enabled-state Enabled \\\n          --enable-private-link true \\\n          --private-link-location \"eastus\" \\\n          --private-link-resource \"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CLIENT_RG}/providers/Microsoft.Web/sites/${APP_NAME}\" \\\n          --private-link-sub-resource-type \"sites\" \\\n          --private-link-request-message \"AFD App Service origin Private Link request.\" \\\n          --enforce-certificate-name-check true -o json)\n\n        # Extract private link connection ID\n        echo \"Extracting private link ID\"\n        PL_ID=$(echo \"$OUTPUT\" | jq -r '.privateLinkResource.id')\n        if [ -n \"$PL_ID\" ]; then\n          PRIVATE_LINK_IDS+=(\"$PL_ID\")\n          echo \"Added private link ID: $PL_ID\"\n        else\n          echo \"WARNING: Failed to extract private link ID for $CLIENT\"\n        fi\n\n        # Create the endpoint\n        echo \"Creating endpoint: $ENDPOINT_NAME\"\n        az afd endpoint create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --endpoint-name \"$ENDPOINT_NAME\" \\\n          --enabled-state Enabled\n\n        # Create the route\n        echo \"Creating route: $ROUTE_NAME\"\n        az afd route create \\\n          --resource-group \"$RESOURCE_GROUP\" \\\n          --profile-name \"$FRONTDOOR_NAME\" \\\n          --endpoint-name \"$ENDPOINT_NAME\" \\\n          --route-name \"$ROUTE_NAME\" \\\n          --origin-group \"$ORIGIN_GROUP\" \\\n          --supported-protocols Https \\\n          --forwarding-protocol HttpsOnly \\\n          --link-to-default-domain Enabled \\\n          --https-redirect Disabled\n      done\n\n      # Return the private link IDs for the next script to use\n      echo \"Returning private link IDs\"\n      echo \"{\\\"privateLinks\\\": [$(printf '\"%s\",' \"${PRIVATE_LINK_IDS[@]}\" | sed 's/,$/')]}\" > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                "environmentVariables": [
                  {
                    "name": "RESOURCE_GROUP",
                    "value": "[resourceGroup().name]"
                  },
                  {
                    "name": "FRONTDOOR_NAME",
                    "value": "[parameters('name')]"
                  },
                  {
                    "name": "DISCRIMINATOR",
                    "value": "[parameters('discriminator')]"
                  },
                  {
                    "name": "CLIENT_NAMES",
                    "value": "[join(parameters('clientNames'), ',')]"
                  },
                  {
                    "name": "SUBSCRIPTION_ID",
                    "value": "[parameters('subscriptionId')]"
                  }
                ],
                "retentionInterval": "PT1H",
                "timeout": "PT20M",
                "cleanupPreference": "OnSuccess"
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "approve-pl-connections",
              "location": "eastus",
              "kind": "AzureCLI",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('rg-central', 'Microsoft.ManagedIdentity/userAssignedIdentities', 'uami-deployment-scripts'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.40.0",
                "scriptContent": "      #!/bin/bash\n      set -ex\n      \n      # Parse input parameters\n      DISCRIMINATOR=\"$DISCRIMINATOR\"\n      SUBSCRIPTION_ID=\"$SUBSCRIPTION_ID\" \n      IFS=',' read -r -a CLIENT_NAMES <<< \"$CLIENT_NAMES\"\n      \n      # Parse private link IDs from previous script\n      PRIVATE_LINKS=$(echo $PRIVATE_LINKS | jq -r '.privateLinks[]')\n      \n      # Function to wait for private endpoint connection to be created\n      wait_for_pe_connection() {\n        local app_id=$1\n        local max_attempts=30\n        local attempt=0\n        local found=false\n        \n        echo \"Waiting for private endpoint connection to be created for $app_id...\"\n        \n        while [ $attempt -lt $max_attempts ] && [ \"$found\" = false ]; do\n          connections=$(az network private-endpoint-connection list --id \"$app_id\" -o json 2>/dev/null || echo \"[]\")\n          connection_count=$(echo \"$connections\" | jq 'length')\n          \n          if [ \"$connection_count\" -gt 0 ]; then\n            found=true\n            echo \"Private endpoint connection found for $app_id\"\n          else\n            echo \"Attempt $((attempt+1))/$max_attempts: No private endpoint connections found yet, waiting...\"\n            sleep 10\n            ((attempt++))\n          fi\n        done\n        \n        if [ \"$found\" = false ]; then\n          echo \"Failed to find private endpoint connection after $max_attempts attempts\"\n          return 1\n        fi\n        \n        return 0\n      }\n      \n      # Process each client\n      for CLIENT in \"${CLIENT_NAMES[@]}\"; do\n        # App properties\n        CLIENT_RG=\"rg-${CLIENT}\"\n        APP_NAME=\"app-${DISCRIMINATOR}-${CLIENT}\"\n        APP_ID=\"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CLIENT_RG}/providers/Microsoft.Web/sites/${APP_NAME}\"\n        \n        echo \"Processing app: $APP_NAME in resource group: $CLIENT_RG\"\n        \n        # Wait for private endpoint connection to be created\n        if wait_for_pe_connection \"$APP_ID\"; then\n          # Approve all pending connections for the app\n          echo \"Approving private endpoint connections for $APP_NAME...\"\n          \n          connections=$(az network private-endpoint-connection list --id \"$APP_ID\" -o json)\n          for connection in $(echo \"$connections\" | jq -c '.[]'); do\n            connection_id=$(echo \"$connection\" | jq -r '.id')\n            status=$(echo \"$connection\" | jq -r '.properties.privateLinkServiceConnectionState.status // \"Unknown\"')\n            \n            if [ \"$status\" != \"Approved\" ]; then\n              echo \"Approving connection: $connection_id\"\n              az network private-endpoint-connection approve \\\n                --id \"$connection_id\" \\\n                --description \"Approved by deployment script\" || echo \"Failed to approve connection: $connection_id\"\n            else\n              echo \"Connection already approved: $connection_id\"\n            fi\n          done\n          \n          # Wait for approval to take effect (10 seconds)\n          echo \"Waiting for approval to take effect...\"\n          sleep 10\n          \n          # Disable public network access for the app\n          echo \"Disabling public network access for $APP_NAME...\"\n          az webapp update \\\n            --resource-group \"$CLIENT_RG\" \\\n            --name \"$APP_NAME\" \\\n            --set publicNetworkAccess=Disabled || echo \"Failed to disable public network access for $APP_NAME\"\n        else\n          echo \"Skipping approval for $APP_NAME due to timeout waiting for private endpoint connection\"\n        fi\n      done\n      \n      echo \"Private link approval and public network access configuration completed\"\n      echo \"{\\\"status\\\": \\\"completed\\\"}\" > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                "environmentVariables": [
                  {
                    "name": "DISCRIMINATOR",
                    "value": "[parameters('discriminator')]"
                  },
                  {
                    "name": "CLIENT_NAMES",
                    "value": "[join(parameters('clientNames'), ',')]"
                  },
                  {
                    "name": "SUBSCRIPTION_ID",
                    "value": "[parameters('subscriptionId')]"
                  },
                  {
                    "name": "PRIVATE_LINKS",
                    "value": "[string(reference(resourceId('Microsoft.Resources/deploymentScripts', format('configure-frontend-{0}', parameters('name'))), '2023-08-01').outputs)]"
                  }
                ],
                "retentionInterval": "PT1H",
                "timeout": "PT20M",
                "cleanupPreference": "OnSuccess"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', format('configure-frontend-{0}', parameters('name')))]"
              ]
            }
          ]
        }
      }
    }
  ]
}